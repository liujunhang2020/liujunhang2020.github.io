<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>css3入门(二)</title>
    <link href="/2020/11/24/css3%E5%85%A5%E9%97%A8-%E4%BA%8C/"/>
    <url>/2020/11/24/css3%E5%85%A5%E9%97%A8-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p><img src="https://unsplash.it/1600/900?random" alt="风景"></p><h2 id="2d变换"><a href="#2d变换" class="headerlink" title="2d变换"></a>2d变换</h2><p>在css3中，可以通过2d相关的属性实现元素的2d变换，包括:</p><ul><li>位移</li><li>旋转</li><li>缩放</li><li>倾斜</li></ul><h3 id="位移"><a href="#位移" class="headerlink" title="位移"></a>位移</h3><p>可以通过将transform的值设置为translate 来让元素进行位移，translate的语法如下:</p><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">translate</span>(<span class="hljs-selector-tag">x</span>, <span class="hljs-selector-tag">y</span>)</code></pre><ul><li>x 沿着x轴位移的距离</li><li>y 沿着y轴位移的距离</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">translateX</span>(<span class="hljs-selector-tag">length</span>)</code></pre><ul><li>length x轴位移的距离</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">translateY</span>(<span class="hljs-selector-tag">length</span>)</code></pre><ul><li>length Y轴位移的距离</li></ul><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 500px;        height: 400px;        border: 1px solid red;         margin: 100px auto;    &#125;<span class="css">    <span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.d1</span> &#123;</span>        width: 100px;        height: 100px;        background-color: lightblue;        transition: 3s;    &#125;<span class="css">    <span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.d1</span> &#123;</span>        transform: translate(100px,100px);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123201743.png"></p><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>2d的旋转可以通过将transform属性设置为rotate并且设置旋转的角度。</p><p>语法格式如下:</p><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">rotate</span>(<span class="hljs-selector-tag">deg</span>)</code></pre><ul><li>deg 角度</li></ul><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 300px;        margin: 100px auto;        background-color: red;        transform: rotate(120deg);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123202817.png"></p><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>通过将transform设置为scale可以实现元素的缩放效果。</p><p>语法格式如下:</p><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">scale</span>(<span class="hljs-selector-tag">x</span>,<span class="hljs-selector-tag">y</span>)</code></pre><ul><li>将元素的宽度更改为原来的x倍</li><li>将元素的高度更改为原来的y倍</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">scaleX</span>(<span class="hljs-selector-tag">n</span>)</code></pre><ul><li>n 将元素的宽度变为原来的n倍</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">scaleY</span>(<span class="hljs-selector-tag">n</span>)</code></pre><ul><li>n 将元素的高度变为原来的n倍</li></ul><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 200px;        height: 200px;        background-color: red;        margin: 100px auto;        transform: scale(2,2);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123203730.png"></p><h3 id="倾斜"><a href="#倾斜" class="headerlink" title="倾斜"></a>倾斜</h3><p>通过将transform属性设置为skew可以进行倾斜操作。</p><p>语法格式如下:</p><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">skew</span>(<span class="hljs-selector-tag">x</span>, <span class="hljs-selector-tag">y</span>)</code></pre><ul><li>x 元素沿着水平方向倾斜的角度</li><li>y 元素沿着垂直方向倾斜的角度</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">skewX</span>(<span class="hljs-selector-tag">deg</span>)</code></pre><ul><li>元素沿着水平方向倾斜的角度</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">skewY</span>(<span class="hljs-selector-tag">deg</span>)</code></pre><p>元素沿着垂直方向倾斜的角度</p><blockquote><p>skew(x, y) 如果第二个参数没有提供，则值为0。也就是y轴方向上无倾斜。</p></blockquote><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;        margin: 100px auto;<span class="css">        <span class="hljs-selector-tag">border</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">dotted</span> <span class="hljs-selector-id">#222</span>;</span>    &#125;<span class="css">    <span class="hljs-selector-class">.d1</span> &#123;</span>        width: 300px;        height: 200px;        background-color: lightblue;        transform: skewX(30deg);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123210718.png"></p><blockquote><p>只要不是倾斜的角度是180度，skewX()元素会保持着本身的高度，在保持本身高度的基础上进行拉长自身产生倾斜。</p><p>skewY() 元素会保持本身的宽度，沿着Y轴倾斜。</p><p>skew(x,y)方法会先按照skewX()方法倾斜，然后按照skewY()方法倾斜</p></blockquote><h3 id="2d中心原点"><a href="#2d中心原点" class="headerlink" title="2d中心原点"></a>2d中心原点</h3><p>在2d中，可以通过transform-origin属性设置中心原点。默认情况下，元素的中心原点位于X轴和Y轴的50%处。</p><p>默认情况下，CSS3变形进行的位移、缩放、旋转、倾斜都是以元素的中心原点进行变形。</p><p>语法格式:</p><pre><code class="hljs css">transform-origin: &lt;length-percentage&gt; | keywords</code></pre><ul><li>length-percentage 长度值一般使用百分比作为单位，很少使用px、em等作为单位。</li><li>keywords 关键字</li></ul><p><strong>transform-origin属性取值</strong></p><table><thead><tr><th align="left">关键字</th><th align="left">百分比</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">top left</td><td align="left">0 0</td><td align="left">左上</td></tr><tr><td align="left">top center</td><td align="left">50% 0</td><td align="left">靠上居中</td></tr><tr><td align="left">top right</td><td align="left">100% 0</td><td align="left">右上</td></tr><tr><td align="left">left center</td><td align="left">0 50%</td><td align="left">靠左居中</td></tr><tr><td align="left">center center</td><td align="left">50% 50%</td><td align="left">正中</td></tr><tr><td align="left">right center</td><td align="left">100% 50%</td><td align="left">靠右居中</td></tr><tr><td align="left">bottom left</td><td align="left">0 100%</td><td align="left">左下</td></tr><tr><td align="left">bottom center</td><td align="left">50% 100%</td><td align="left">靠下居中</td></tr><tr><td align="left">bottom right</td><td align="left">100% 100%</td><td align="left">右下</td></tr></tbody></table><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 400px;        height: 300px;        border: 1px dotted red;        margin: 300px auto;    &#125;<span class="css">    <span class="hljs-selector-class">.d1</span> &#123;</span>        width: 400px;        height: 300px;        background-color: lightblue;        transform: rotate(45deg);        transform-origin: right top;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123213408.png"></p><h2 id="3d变换"><a href="#3d变换" class="headerlink" title="3d变换"></a>3d变换</h2><p>首先需要知道的是，css3中的3d只是伪3d，其次，相对于2d来说，3d的变换多了一个z轴。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123223902.png"></p><p>3d中的属性:</p><ul><li>translate3d(x,y,z) / translateX  translateY translateZ</li><li>scale3d(x,y,z) / scaleX scaleY scaleZ</li><li>rotate3d(x,y,angle) / rotateX(angle) rotateY(angle) rotateZ(angle)</li><li>transform-style: flat | preserve-3d [开启3d空间]</li><li>perspective[给父元素设置] 和  perspective() [给当前元素设置]</li><li>backface-visibibility 背面隐藏</li></ul><h3 id="3d-位移"><a href="#3d-位移" class="headerlink" title="3d 位移"></a>3d 位移</h3><p>想要实现3d位移，可以通过下面的几个属性来实现：</p><ul><li>translateX 沿着x轴位移</li><li>translateY 沿着y轴位移</li><li>translateZ 沿着z轴位移</li><li>translate3d(x,y,z) x轴、y轴、z轴位移</li></ul><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 400px;        height: 300px;        border: 1px dotted red;        margin: 100px auto;        perspective: 1200px;    &#125;<span class="css">    <span class="hljs-selector-class">.d1</span> &#123;</span>        width: 100px;        height: 100px;        background-color: lightblue;        transition: 3s;    &#125;<span class="css">    <span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.d1</span> &#123;</span><span class="css">        <span class="hljs-selector-tag">transform</span><span class="hljs-selector-pseudo">:translate3d(100px</span>, 200<span class="hljs-selector-tag">px</span>, 300<span class="hljs-selector-tag">px</span>);</span>    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123221355.png"></p><h3 id="3d-缩放"><a href="#3d-缩放" class="headerlink" title="3d 缩放"></a>3d 缩放</h3><p>想要使用3d 缩放，可以通过下面的几个属性来实现：</p><ul><li>scaleX(n) 宽度变为n倍</li><li>scaleY(n) 高度变为n倍</li><li>scaleZ(n) 沿着z轴进行缩放</li><li>scale3d(sx,sy,sz) 3d缩放函数</li></ul><p>示例代码:</p><ul><li>scaleX(n)</li></ul><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>    body &#123;        perspective: 1200px;    &#125;<span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 100px;        height: 100px;        background-color: red;        margin: 100px auto;        transform: scaleX(3);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123230241.png"></p><ul><li>scaleY(n)</li></ul><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>    body &#123;        perspective: 1200px;    &#125;<span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 100px;        height: 100px;        background-color: red;        margin: 100px auto;        transform: scaleY(3);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123230336.png"></p><ul><li>scaleZ(n)</li></ul><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>    body &#123;        perspective: 1200px;    &#125;<span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 100px;        height: 100px;        background-color: red;        margin: 100px auto;        transform: scaleZ(25) rotateX(30deg);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123230526.png"></p><blockquote><p>如果单独的演示scaleZ是看不到效果的，必须开启视距以及配合其他的变形属性。</p></blockquote><ul><li>scale3d()</li></ul><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>    body &#123;        perspective: 1200px;    &#125;<span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 100px;        height: 100px;        background-color: red;        margin: 100px auto;        transform: scale3d(2,2,20) rotateX(30deg);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><h3 id="3d旋转"><a href="#3d旋转" class="headerlink" title="3d旋转"></a>3d旋转</h3><p>想要使用3d旋转，可以通过下面的属性来实现：</p><ul><li>rotate3d(x,y,angle) </li><li>rotateX(angle)</li><li>rotateY(angle)</li><li>rotateZ(angle)</li></ul><p>示例代码:</p><ul><li>rotate3d(x,y,angle)</li></ul><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;        background-color: red;        margin: 100px auto;        transform: rotate3d(1,2,3,30deg) perspective(1200px);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123231701.png"></p><ul><li>rotateX(angle) 和 rotateY(angle)</li></ul><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;        background-color: red;        margin: 100px auto;        transform: rotateX(30deg) rotateY(30deg) perspective(1200px);        transform-style: preserve-3d;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123232007.png"></p><ul><li>rotateZ(angle)</li></ul><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;        background-color: red;        margin: 100px auto;        transform: rotateZ(120deg);        transform-style: preserve-3d;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123232204.png"></p><h3 id="正方体案例"><a href="#正方体案例" class="headerlink" title="正方体案例"></a>正方体案例</h3><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>    * &#123;        margin: 0;        padding: 0;    &#125;    ul &#123;        width: 200px;        height: 200px;        margin: 100px auto;        position: relative;        transition: 6s;        list-style: none;        transform-style: preserve-3d;    &#125;    ul li &#123;        width: 100%;        height: 100%;        text-align: center;        line-height: 200px;<span class="css">        <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#222</span>;</span>        font-size: 20px;        position: absolute;        backface-visibility: hidden;    &#125;<span class="css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(1)</span> &#123;</span>        transform: rotateX(0deg) translateZ(100px);<span class="css">        <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-tag">rgba</span>(200,0,0,<span class="hljs-selector-class">.6</span>);</span>    &#125;<span class="css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(2)</span> &#123;</span>        transform: rotateX(90deg) translateZ(100px);<span class="css">        <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-tag">rgba</span>(0,255,0,<span class="hljs-selector-class">.6</span>);</span>    &#125;<span class="css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(3)</span> &#123;</span>        transform: rotateX(180deg) translateZ(100px);<span class="css">        <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-tag">rgba</span>(0,0,200,<span class="hljs-selector-class">.6</span>);</span>    &#125;<span class="css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(4)</span> &#123;</span>        transform: rotateX(270deg) translateZ(100px);<span class="css">        <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-tag">rgba</span>(200,100,0,<span class="hljs-selector-class">.6</span>);</span>    &#125;<span class="css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(5)</span> &#123;</span>        transform: rotateY(90deg) translateZ(100px);<span class="css">        <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-tag">rgba</span>(62, 111, 175, 0<span class="hljs-selector-class">.6</span>);</span>    &#125;<span class="css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(6)</span> &#123;</span>        transform: rotateY(-90deg) translateZ(100px);<span class="css">        <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-tag">rgba</span>(146, 41, 150, 0<span class="hljs-selector-class">.6</span>);</span>    &#125;<span class="css">    <span class="hljs-selector-tag">ul</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span>        transform: rotateX(360deg) rotateY(360deg);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123234156.png"></p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>在css3中，实现动画需要通过下面的属性来实现:</p><ul><li>animation-name 调用关键帧</li><li>animation-duration 动画完成时间</li><li>animation-timing-function 动画的速度曲线</li><li>animation-delay 延迟</li><li>animation-iteration-count 动画播放的次数 <ul><li>n 具体次数</li><li>infinite 无限次播放</li></ul></li><li>animation-direction 动画是否轮流反向播放动画<ul><li>normal 正常</li><li>alterate 轮流反向播放</li></ul></li><li>animation-play-state 暂停/运行<ul><li>paused 暂停</li><li>running 运行</li></ul></li><li>animation-fill-mode 规定动画在播放前或者之后，动画效果是否可见<ul><li>none 不改变默认</li><li>forwards 当动画完成后保持最后一个属性值</li><li>backwards 在animation-delay指定的一段时间之内，在动画显示之前，应用开始属性值</li></ul></li></ul><p>简写语法:</p><pre><code class="hljs css"><span class="hljs-selector-tag">animation</span>: <span class="hljs-selector-tag">name</span> <span class="hljs-selector-tag">duration</span> <span class="hljs-selector-tag">timing-function</span> <span class="hljs-selector-tag">delay</span> <span class="hljs-selector-tag">iteration</span> <span class="hljs-selector-tag">-count</span> <span class="hljs-selector-tag">direction</span></code></pre><p><strong>关键帧的创建</strong></p><p>keyframes:</p><pre><code class="hljs css"><span class="hljs-selector-tag">keyframes</span> 关键帧名 &#123;0% &#123;&#125;    10% &#123;&#125;    ...    100% &#123;&#125;&#125;</code></pre><p>示例：</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;chest&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;heart left side top&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;heart center&quot;</span>&gt;</span><span class="hljs-symbol">&amp;hearts;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;heart right side&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>    html, body &#123;        height: 100%;    &#125;    body &#123;        margin: 0;        padding: 0;<span class="css">        <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#ffa5a5</span>;</span><span class="css">        <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-tag">linear-gradient</span>(<span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">bottom</span>, <span class="hljs-selector-id">#ffa5a5</span> 0%,<span class="hljs-selector-id">#ffd3d3</span> 100%);</span>    &#125;<span class="css">    <span class="hljs-selector-class">.chest</span> &#123;</span>        width: 500px;        height: 500px;        margin: 0 auto;        position: relative;    &#125;<span class="css">    <span class="hljs-selector-class">.heart</span> &#123;</span>        position: absolute;        z-index: 2;<span class="css">        <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-tag">linear-gradient</span>(<span class="hljs-selector-tag">-90deg</span>, <span class="hljs-selector-id">#F50A45</span> 0%, <span class="hljs-selector-id">#d5093c</span> 40%);</span><span class="css">        <span class="hljs-selector-tag">animation</span>: <span class="hljs-selector-tag">beat</span> 0<span class="hljs-selector-class">.7s</span> <span class="hljs-selector-tag">ease</span> 0<span class="hljs-selector-tag">s</span> <span class="hljs-selector-tag">infinite</span> <span class="hljs-selector-tag">normal</span>;</span>    &#125;<span class="css">    <span class="hljs-selector-class">.heart</span><span class="hljs-selector-class">.center</span> &#123;</span><span class="css">        <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-tag">linear-gradient</span>(<span class="hljs-selector-tag">-45deg</span>, <span class="hljs-selector-id">#B80734</span> 0%, <span class="hljs-selector-id">#d5093c</span> 40%);</span>    &#125;<span class="css">    <span class="hljs-selector-class">.heart</span><span class="hljs-selector-class">.top</span> &#123;</span>        z-index: 3;    &#125;<span class="css">    <span class="hljs-selector-class">.side</span> &#123;</span>        top: 100px;        width: 220px;        height: 220px;        border-radius: 220px;    &#125;<span class="css">    <span class="hljs-selector-class">.center</span> &#123;</span>        width: 210px;        height: 210px;        bottom: 100px;        left: 145px;        font-size: 0;        text-indent: -9999px;    &#125;<span class="css">    <span class="hljs-selector-class">.left</span> &#123;</span>        left: 62px;    &#125;<span class="css">    <span class="hljs-selector-class">.right</span> &#123;</span>        right: 62px;    &#125;<span class="css">    <span class="hljs-keyword">@keyframes</span> beat &#123;</span>        0% &#123;            transform: scale(1) rotate(225deg);<span class="css">            <span class="hljs-selector-tag">box-shadow</span><span class="hljs-selector-pseudo">:0</span> 0 40<span class="hljs-selector-tag">px</span> <span class="hljs-selector-id">#d5093c</span>;</span>        &#125;        50% &#123;<span class="css">            <span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">scale</span>(1<span class="hljs-selector-class">.1</span>) <span class="hljs-selector-tag">rotate</span>(225<span class="hljs-selector-tag">deg</span>);</span><span class="css">            <span class="hljs-selector-tag">box-shadow</span><span class="hljs-selector-pseudo">:0</span> 0 70<span class="hljs-selector-tag">px</span> <span class="hljs-selector-id">#d5093c</span>;</span>        &#125;        100% &#123;            transform: scale(1) rotate(225deg);<span class="css">            <span class="hljs-selector-tag">box-shadow</span><span class="hljs-selector-pseudo">:0</span> 0 40<span class="hljs-selector-tag">px</span> <span class="hljs-selector-id">#d5093c</span>;</span>        &#125;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201123235657.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css3,css3动画,css3 2d,css3 3d</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3入门(一)</title>
    <link href="/2020/11/23/css3%E5%85%A5%E9%97%A8-%E4%B8%80/"/>
    <url>/2020/11/23/css3%E5%85%A5%E9%97%A8-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p><img src="https://unsplash.it/1600/900?random" alt="风景"></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>CSS3 中相对于CSS2来说，新增加了很多的内容，其中较为常用的包括下面几点：</p><ul><li>选择器</li><li>自定义字体(嵌入字体)和字体图标</li><li>边框属性</li><li>背景属性</li><li>文本阴影和盒子阴影</li><li>颜色属性</li><li>渐变(线性渐变、径向渐变、重复渐变)</li><li>过渡</li><li>2d变换</li><li>3d变换</li><li>动画</li><li>新的布局方案(flex 布局、多列布局、移动端布局、grid布局)</li></ul><blockquote><p> 在本篇文章当中，列出的都是一些css3当中新增加的较为常用并且兼容性较好的属性。</p></blockquote><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>在这里主要说的是两部分选择器：</p><ul><li>属性选择器</li><li>伪类选择器</li></ul><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>常用的属性选择器如下：</p><ul><li>E[attr] 选择具有attr属性的元素</li><li>E[attr=value] 选择具有attr属性并且属性值等于value 的元素</li><li>E[attr^=value] 选择具有attr属性并且以value 属性开头的元素</li><li>E[attr$=value] 选择具有attr属性并且以value属性结束的元素</li><li>E[attr*=value] 选择具有attr属性并且属性值中包含value的元素</li><li>E[attr~=value] 具有attr属性并且属性列表中包含有value这个属性值的元素</li><li>E[attr|=value] 选择具有attr属性并且属性值以value 或者value-开头的属性</li></ul><p>下面是示例的demo:</p><ul><li>E[attr] 和 E[attr=value]</li></ul><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span>hello,world<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s2&quot;</span>&gt;</span>hello,world<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.box1</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[class]</span> &#123;</span>        color: pink;    &#125;<span class="css">    <span class="hljs-selector-class">.box1</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[class=<span class="hljs-string">&#x27;s1&#x27;</span>]</span> &#123;</span>        color: red;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际的效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122154722.png"></p><ul><li>E[attr^=value] 和 E[attr$=value] </li></ul><pre><code class="hljs html">html代码<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>this is s1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;world&quot;</span>&gt;</span>this is s2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.box2</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[title^=<span class="hljs-string">&#x27;he&#x27;</span>]</span> &#123;</span>        color: pink    &#125;<span class="css">    <span class="hljs-selector-class">.box2</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[title$=<span class="hljs-string">&#x27;ld&#x27;</span>]</span> &#123;</span>        color: orange;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际的效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122155121.png"></p><ul><li>E[attr*=value]  和 E[attr~=value] </li></ul><pre><code class="hljs html">html代码<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hellos1&quot;</span>&gt;</span>this is s1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello s2&quot;</span>&gt;</span>this is s2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码 <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">     <span class="hljs-selector-class">.box3</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[class*=<span class="hljs-string">&#x27;hello&#x27;</span>]</span> &#123;</span>         color: red;     &#125;<span class="css">     <span class="hljs-selector-class">.box3</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[class~=<span class="hljs-string">&#x27;hello&#x27;</span>]</span> &#123;</span>         color: purple;     &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际的效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122155705.png"></p><ul><li>E[attr|=value]</li></ul><pre><code class="hljs html">html代码 <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box4&quot;</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello-s1&quot;</span>&gt;</span>this is s1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>this is s2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码 <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">     <span class="hljs-selector-class">.box4</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[class|=<span class="hljs-string">&#x27;hello&#x27;</span>]</span> &#123;</span>         color: red;     &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际的效果：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122155953.png"></p><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>常用的伪类选择器可以分为下面的几类:</p><ul><li>结构伪类选择器</li><li>目标伪类选择器</li><li>UI元素状态伪类选择器</li><li>否定伪类选择器</li><li>动态伪类选择器(css2)</li></ul><p>下面将会针对这几类的伪类选择器进行梳理。</p><h4 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h4><p>常用的结构伪类选择器如下:</p><ul><li>E:first-child 选择匹配到的第一个子元素。</li><li>E:last-child  选择匹配到的最后一个子元素。</li><li>E:nth-child(n) 选择匹配到的第n个子元素。</li><li>E:only-child 选择唯一的一个子元素。</li><li>E:nth-of-type(n) 选择匹配同类型中的第n个同级兄弟元素。</li><li>E:only-of-type 匹配属于同类型中唯一的兄弟元素。</li><li>E:first-of-type 匹配同级兄弟元素中第一个兄弟元素。</li><li>E:nth-last-child(n) 从子元素列表的最后开始查找第n个子元素。</li><li>E:nth-last-of-type(n) 从同级兄弟元素列表的最后开始查找第n个元素。</li><li>:root 匹配根元素</li></ul><p>实例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-tag">ul</span> &gt; <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first-child</span> &#123;</span>        color: red;    &#125;<span class="css">    <span class="hljs-selector-tag">ul</span> &gt; <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;</span>        color: green;    &#125;<span class="css">    <span class="hljs-comment">/* odd 奇数行 */</span></span><span class="css">    <span class="hljs-selector-tag">ul</span> &gt; <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(odd)</span> &#123;</span>        font-style: italic;    &#125;<span class="css">    <span class="hljs-comment">/* even 偶数行 */</span></span><span class="css">    <span class="hljs-selector-tag">ul</span>&gt; <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(even)</span> &#123;</span>        font-style: normal;    &#125;<span class="css">    <span class="hljs-selector-tag">ul</span> &gt; <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(3)</span> &#123;</span>        color: pink;    &#125;<span class="css">    <span class="hljs-selector-tag">ul</span> &gt; <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(5)</span> &#123;</span>        color: orange;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:<br><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122162205.png"></p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:first-of-type</span> &#123;</span>        color: red;    &#125;<span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:last-of-type</span> &#123;</span>        color: green;    &#125;<span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type(odd)</span> &#123;</span>        font-style: italic;    &#125;<span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type(even)</span> &#123;</span>        font-style: normal;    &#125;<span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type(3)</span> &#123;</span>        color: pink;    &#125;<span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type(5)</span> &#123;</span>        color: orange;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实例效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122162133.png"></p><h4 id="目标伪类选择器"><a href="#目标伪类选择器" class="headerlink" title="目标伪类选择器"></a>目标伪类选择器</h4><p>常用的目标伪类选择器如下:</p><ul><li>E:target  选择器可用于选取当前活动的目标元素(URL 带有后面跟有锚名称 #，指向文档内某个具体的元素。这个被链接的元素就是目标元素(target element))。</li></ul><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#hello&quot;</span>&gt;</span>跳转到锚点hello<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>     Lorem ipsum dolor sit amet consectetur adipisicing elit. Ullam deleniti, possimus temporibus quibusdam suscipit minima fuga provident. Aliquid distinctio iste tenetur odio! Molestias beatae possimus voluptatem. Error ab ratione totam!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.hello</span><span class="hljs-selector-pseudo">:target</span> &#123;</span>        color: red;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122162923.png"></p><h4 id="UI元素状态伪类选择器"><a href="#UI元素状态伪类选择器" class="headerlink" title="UI元素状态伪类选择器"></a>UI元素状态伪类选择器</h4><p>常用的UI元素状态伪类选择器如下:</p><ul><li>E:enabled 匹配用户界面上处于可用状态的元素</li><li>E:disabled 匹配用户界面中处于禁用状态的元素</li><li>E:checked 匹配用户界面中处于选中状态的元素</li><li>E:selection 匹配用户界面中处于被用户选中或者处于高亮状态元素</li></ul><p>下面是示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    密码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pass_word&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc123&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    喜好: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;like&quot;</span> &gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>电影<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;like&quot;</span> &gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>音乐<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>    Lorem ipsum dolor sit amet consectetur adipisicing elit. Saepe facere explicabo sequi vel, aspernatur fugiat aperiam odit ducimus non, laudantium itaque velit numquam! Officiis dolore quas ex assumenda magnam dolores.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>CSS代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:enabled</span> &#123;</span>        color: red;    &#125;<span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:disabled</span> &#123;</span>        color: purple;    &#125;<span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> + <span class="hljs-selector-tag">span</span> &#123;</span>        color: pink;    &#125;<span class="css">    <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::selection</span> &#123;</span>        color: orange;<span class="css">        <span class="hljs-comment">/* user-select: none; 禁止用户选中 */</span></span>    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122164147.png"></p><h4 id="否定伪类选择器"><a href="#否定伪类选择器" class="headerlink" title="否定伪类选择器"></a>否定伪类选择器</h4><p>常用的否定伪类选择器如下:</p><ul><li>E:not() 匹配除了括号内条件的元素</li></ul><pre><code class="hljs html">html代码：<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>this is p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>this is p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:not(.p1)</span> &#123;</span>        color: red;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><h4 id="动态伪类选择器"><a href="#动态伪类选择器" class="headerlink" title="动态伪类选择器"></a>动态伪类选择器</h4><p>动态伪类选择器是css2中就已经存在的选择器，包括下面的几个:</p><ul><li>E:link </li><li>E:visited</li><li>E:hover</li><li>E:active</li></ul><h2 id="自定义字体-嵌入字体-和字体图标"><a href="#自定义字体-嵌入字体-和字体图标" class="headerlink" title="自定义字体(嵌入字体)和字体图标"></a>自定义字体(嵌入字体)和字体图标</h2><h3 id="自定义字体-嵌入字体"><a href="#自定义字体-嵌入字体" class="headerlink" title="自定义字体(嵌入字体)"></a>自定义字体(嵌入字体)</h3><p>设置自定义字体(嵌入字体)可以通过下面的语法来实现：</p><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;字体名称&quot;</span>;<span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(字体位置)&#125;</code></pre><p>例如，</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>GAME OVER<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-keyword">@font-face</span> &#123;</span>        font-family: game;        src: url(./Retrograde/Retrograde-Regular.otf);    &#125;    h1 &#123;        font-family: game;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际的效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122173913.png"></p><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><p>在网页使用字体图标可以减少http的请求次数，并且可以更加快速的修改和维护。</p><p>在本篇文章中使用的字体图标是阿里的字体图标，首先，需要去官网选择自己需要的字体图标进行下载。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122174332.png"></p><p>选择需要的图标然后添加进购物车，下载即可。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122174646.png"></p><p>下载完成后，会在本地出现一个压缩包，解压之后既是字体图标。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122175243.png"></p><p>可以点击demo_index.html查看图标的使用说明。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122175325.png"></p><p>在demo中，一共提供了三种使用方式，分别为:</p><ul><li>Unicode方式引入</li><li>Font class方式引入</li><li>Symbol方式引入</li></ul><p>在示例网页的下方，都列出了具体的使用方式：</p><ul><li><p>Unicode 使用方式：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122175513.png"></p></li><li><p>Font class使用方式</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122175620.png"></p></li><li><p>Symbol 使用方式：</p></li></ul><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122175708.png"></p><p>三种方式各有好坏，下面的示例代码中，使用的Font class 的引用方式:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont chart-bar icon-chart-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./iconfont.css&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.icon-chart-bar</span> &#123;</span>        font-size: 30px;        color: lightblue    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122175940.png"></p><h2 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h2><p>在css3中，边框属性主要包括下面的两个属性:</p><ul><li>border-radius 边框圆角</li><li>border-image 边框图片</li></ul><h3 id="边框圆角"><a href="#边框圆角" class="headerlink" title="边框圆角"></a>边框圆角</h3><p>通过border-radius属性可以实现边框圆角的设置。既可以一次性设置四个角的圆角程度，也可以分别设置不同的角。</p><p>语法格式如下:</p><pre><code class="hljs css">border-radius: 1-4 length|% / 1-4 length|%;</code></pre><ul><li><em>length</em> 定义圆形半径或椭圆的半长轴，半短轴。负值无效。</li><li><em>%</em> 使用百分数定义圆形半径或椭圆的半长轴，半短轴。水平半轴相对于盒模型的宽度；垂直半轴相对于盒模型的高度。负值无效。</li></ul><p>当然，除了使用简写属性以外，还可以采用单独设置的方式来设置不同角的圆角值：</p><ul><li>border-top-left </li><li>border-top-right</li><li>border-bottom-left</li><li>border-bottom-right</li></ul><p>示例代码：</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.d1</span> &#123;</span>        width: 300px;        height: 200px;        border-radius: 10px;        background-color: orange;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际的效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122183301.png"></p><blockquote><p>当border-radius的值超过50%时或者超过宽度一半的时候，元素就会变成圆。如果元素是一个正方形，最终就会变成正圆，如果元素是一个长方形，最终就会变成椭圆。</p></blockquote><blockquote><p>即使元素没有边框，圆角可以应用到background上，具体效果要收到background-clip的影响。</p></blockquote><blockquote><p>具体细节可以点击<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius">这里</a>查看。</p></blockquote><h3 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h3><p>通过border-image 属性，可以用来给网页元素的边框设置图片。</p><p>border-image是一个简写属性，一共包括下面的几个属性:</p><ul><li>border-image-source 这个属性主要是用来给标签引入边框图片。</li><li>border-image-slice 通过这个属性，可以指定边框图像顶部、右侧、底部、左侧内偏移量。没有具体的单位值，只可以使用数字或者百分比。</li><li>border-image-width 设置边框图片宽度，代替盒子本身的边框宽度。</li><li>border-image-outset 通过这个属性，可以让边框属性延伸到盒子外部。</li><li>border-image-repeat 通过这个属性，可以设置边框背景是否重复。</li></ul><h4 id="border-image-source"><a href="#border-image-source" class="headerlink" title="border-image-source"></a>border-image-source</h4><p>通过border-image-source属性可以引入边框图片。语法如下：</p><pre><code class="hljs css">border-image-source: none | url;</code></pre><ul><li>url 图片地址</li></ul><p>示例如下:</p><pre><code class="hljs html">html代码: <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>     Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim harum nulla doloremque eius, eos beatae, dicta neque iusto qui, tempore voluptate natus alias repudiandae est sapiente quae velit tenetur fugit.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;        border: 30px solid transparent;        border-image-source: url(./img/border.png);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122195440.png"></p><h4 id="border-image-slice"><a href="#border-image-slice" class="headerlink" title="border-image-slice"></a>border-image-slice</h4><p>通过border-image-source引入边框图片之后，border-image-slice属性会将图片分隔为9个区域: 四个角、四个边以及中心区域。四条切片线，从它们各自的侧面设置给定距离，控制区域的大小。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122200425.png"></p><p>在上面的图像中，说明了每个区域的位置：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122200600.png"></p><p>中间的区域将不会被边框使用，但当设置有 fill 关键词时将会被作为 background-image。这个关键词可以被设置在属性的任何一个位置(前面、后面或者两个值之间)。</p><p>语法格式如下:</p><pre><code class="hljs css">border-image-slice: &lt;number-percentage&gt;&#123;1,4&#125; &amp;&amp; fill?<span class="hljs-selector-tag">where</span> &lt;number-percentage&gt; = &lt;number&gt; | &lt;percentage&gt;</code></pre><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim harum nulla doloremque eius, eos beatae, dicta neque iusto qui, tempore voluptate natus alias repudiandae est sapiente quae velit tenetur fugit.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;        border: 30px solid transparent;        border-image-source: url(./img/border.png);        border-image-slice: 30;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122201055.png"></p><h4 id="border-image-width"><a href="#border-image-width" class="headerlink" title="border-image-width"></a>border-image-width</h4><p>通过border-image-width属性可以设置边界图像的宽度。</p><p>语法格式如下:</p><pre><code class="hljs css">border-image-width: &lt;length-percentage&gt; | number | auto</code></pre><ul><li><code>&lt;length-percentage&gt;</code> 边界的宽度，可以使用<code>&lt;length&gt;</code>或者<code>&lt;percentage&gt;</code>来指定，百分比是相较于水平（垂直）方向上的边框图像区域宽度（高度）的偏移量，不能为负。</li><li><code>&lt;number&gt;</code> 边框宽度，指定为 border-width 的相应倍数，不能为负。</li><li>auto 将等同于内部对应的 border-image-slice 的宽或高（可用的话）。如果图像没有需要的相应的属性，将相对于 border-width 进行指定。</li></ul><p>当设置border-image-width的属性值时，可以按照以下的方式进行设定:</p><ul><li>当指定 <strong>一个</strong> 值时，它将作用到 <strong>四个方向</strong> ；</li><li>当指定 <strong>两个</strong> 值时，它将分别作用到 <strong>垂直方向</strong> 和 <strong>水平方向</strong> ；</li><li>当指定 <strong>三个</strong> 值时，它将分别作用到 <strong>上方</strong>、<strong>水平方向</strong>、和<strong>下方</strong>；</li><li>当指定 <strong>三个</strong> 值时，它将分别作用到 <strong>上方</strong>、<strong>右方</strong>、<strong>下方和左方。</strong></li></ul><p>示例代码：</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim harum nulla doloremque eius, eos beatae, dicta neque iusto qui, tempore voluptate natus alias repudiandae est sapiente quae velit tenetur fugit.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;        border: 30px solid transparent;        border-image-source: url(./img/border.png);        border-image-slice: 30;        border-image-width: 30px;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122203152.png"></p><h4 id="border-image-repeat"><a href="#border-image-repeat" class="headerlink" title="border-image-repeat"></a>border-image-repeat</h4><p>border-image-repeat 定义图片如何填充边框。或为单个值，设置所有的边框；或为两个值，分别设置水平与垂直的边框。</p><p>语法格式如下：</p><pre><code class="hljs css">border-image-repeat: [ stretch | repeat | round | space ]&#123;1,2&#125;</code></pre><ul><li>stretch 拉伸图片以填充边框(默认值)。</li><li>repeat 平铺图片以填充边框。</li><li>round 平铺图像。当不能整数次平铺时，根据情况放大或缩小图像。</li><li>space 平铺图像 。当不能整数次平铺时，会用空白间隙填充在图像周围（不会放大或缩小图像）</li></ul><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim harum nulla doloremque eius, eos beatae, dicta neque iusto qui, tempore voluptate natus alias repudiandae est sapiente quae velit tenetur fugit.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;        border: 30px solid transparent;        border-image-source: url(./img/border.png);        border-image-slice: 30;        border-image-width: 30px;        border-image-repeat: round;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122204804.png"></p><h4 id="border-image-outset"><a href="#border-image-outset" class="headerlink" title="border-image-outset"></a>border-image-outset</h4><p>border-image-outset属性定义边框图像可超出边框盒的大小。</p><p>语法格式:</p><pre><code class="hljs css">border-image-outset: [ &lt;length&gt; | &lt;number&gt; ]&#123;1,4&#125;</code></pre><p>示例代码：</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim harum nulla doloremque eius, eos beatae, dicta neque iusto qui, tempore voluptate natus alias repudiandae est sapiente quae velit tenetur fugit.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;        border: 30px solid transparent;        border-image-source: url(./img/border.png);        border-image-slice: 30;        border-image-width: 30px;        border-image-repeat: round;        border-image-outset: 2;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122205330.png"></p><p>border-image除了使用图片以外，还可以使用渐变来填充。</p><p>示例代码如下:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>    Lorem ipsum dolor sit, amet consectetur adipisicing elit. Quos a odit doloremque, labore est enim, ut aspernatur ex soluta ipsum pariatur, cum ducimus voluptatum obcaecati sequi officia in officiis incidunt.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.p1</span> &#123;</span>        border: 30px solid transparent;        border-image: linear-gradient(red, orange) 10;        padding: 20px;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122210712.png"></p><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><p>css3中新增加的背景属性如下:</p><ul><li>background-origin 背景图像的填充位置</li><li>background-clip 背景图像的裁切位置</li><li>background-size 设置背景图像的尺寸</li><li>多背景设置</li></ul><h3 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h3><p>通过background-origin 属性，可以设置背景图像的填充位置。</p><p>属性值:</p><ul><li>padding-box 背景图像填充框的相对位置(默认值)</li><li>border-box 背景图像边界框的相对位置</li><li>content-box 背景图像的相对位置的内容框</li></ul><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    Lorem ipsum dolor sit, amet consectetur adipisicing elit. Corrupti, molestiae esse iste dignissimos quaerat et tempora illum, vero repellendus commodi rem architecto recusandae perferendis eligendi necessitatibus animi dolorem vitae fuga.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 400px;        height: 400px;        padding: 30px;<span class="css">        <span class="hljs-selector-tag">border</span>: 30<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-tag">rgba</span>(100,10,30,<span class="hljs-selector-class">.2</span>);</span>        background: url(./img/bg.jpg) no-repeat;        background-origin: border-box;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122213255.png"></p><blockquote><p>通过设置background-origin:border-box 图片直接可以覆盖到border。</p></blockquote><h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h3><p>通过background-clip 属性，可以设置背景图像的裁切位置。常用的属性值如下：</p><ul><li>border-box 背景被裁切到边框位置(默认值)</li><li>padding-box 背景被裁切到padding</li><li>content-box 背景被裁切到content</li></ul><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    Lorem ipsum dolor sit, amet consectetur adipisicing elit. Corrupti, molestiae esse iste dignissimos quaerat et tempora illum, vero repellendus commodi rem architecto recusandae perferendis eligendi necessitatibus animi dolorem vitae fuga.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 400px;        height: 400px;        padding: 30px;<span class="css">        <span class="hljs-selector-tag">border</span>: 30<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-tag">rgba</span>(100,10,30,<span class="hljs-selector-class">.2</span>);</span>        background: url(./img/bg.jpg);        background-clip: padding-box;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122213904.png"></p><h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h3><p>可以通过background-size属性来设置背景图像的尺寸。</p><p>基础语法：</p><pre><code class="hljs css">background-size: length | percentage | cover | contain | auto;</code></pre><ul><li>length ,指定背景图片大小，不能为负值</li><li>percentage 指定背景图片相对背景区（background positioning area）的百分比。</li><li>cover 缩放背景图片以完全覆盖背景区，可能背景图片部分看不见。</li><li>contain 缩放背景图片以完全装入背景区，可能背景区部分空白。当背景图和容器的大小的不同时，容器的空白区域（上/下或者左/右）会显示由 background-color 设置的背景颜色。</li></ul><p>背景图片的大小计算方式：</p><p>当通过宽度和高度值来设定尺寸时，你可以提供一或者两个数值:</p><ul><li>如果仅有一个数值被给定，这个数值将作为宽度值大小，高度值将被设定为<code>auto。</code></li><li>如果有两个数值被给定，第一个将作为宽度值大小，第二个作为高度值大小。</li></ul><p><code>每个值可以是&lt;length&gt;</code>, 是 <code>&lt;percentage&gt;</code>, 或者 <code>auto</code>.</p><blockquote><p>可以通过<code>background-size: 6px, auto, contain</code>代码来设置多个背景图大小。</p></blockquote><h3 id="多背景"><a href="#多背景" class="headerlink" title="多背景"></a>多背景</h3><p>在css3中，新增加了多背景，可以直接在background-image中设置多个背景图。</p><p>示例代码：</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;banner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>    * &#123;        margin: 0;        padding: 0;    &#125;<span class="css">    <span class="hljs-selector-class">.banner</span> &#123;</span>        height: 400px;        background-image: url(./img/Hotel.png),linear-gradient(#e3e3e3, #ccc);        background-size: contain,contain;        background-repeat: no-repeat;        padding: 40px;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122221711.png"></p><h2 id="文本阴影和盒子阴影"><a href="#文本阴影和盒子阴影" class="headerlink" title="文本阴影和盒子阴影"></a>文本阴影和盒子阴影</h2><p>在css3中可以对文本和盒子进行阴影的设置。</p><ul><li>text-shadow 文本阴影</li><li>box-shadow 盒子阴影</li></ul><h3 id="文本阴影"><a href="#文本阴影" class="headerlink" title="文本阴影"></a>文本阴影</h3><p>可以通过text-shadow属性来设置文本阴影，文本阴影的属性值如下：</p><ul><li>h-shadow 水平阴影的位置，允许负值</li><li>v-shadow 垂直阴影的位置，允许负值</li><li>blur 模糊距离</li><li>color 阴影的颜色</li></ul><p>示例代码：</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>hello,world<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>    span &#123;        font-size: 50px;        text-shadow: 10px 10px 10px pink;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122223025.png"></p><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><p>css3当中可以通过box-shadow属性来设置盒子阴影，属性值如下:</p><ul><li>h-shadow 水平阴影的位置，允许负值</li><li>v-shadow 垂直阴影的位置，允许负值</li><li>blur 模糊距离</li><li>spread 设置阴影的大小</li><li>color 设置阴影的颜色、</li><li>inset 将处于元素外部的阴影转换为元素内部的阴影</li></ul><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;        background-color: lightblue;<span class="css">        <span class="hljs-selector-tag">box-shadow</span>: 18<span class="hljs-selector-tag">px</span> 25<span class="hljs-selector-tag">px</span> 24<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">-6px</span> <span class="hljs-selector-id">#222</span>;</span>    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122223853.png"></p><h2 id="颜色属性"><a href="#颜色属性" class="headerlink" title="颜色属性"></a>颜色属性</h2><p>css3中新增加了几种关于设置颜色的内容：</p><ul><li>rgba </li><li>opacity</li><li>hsla</li></ul><p>在新增加的颜色模式中，无论是rgba还是hsla，都是在原有基础上新增加了alpha不透明度通道，通过最后一个值a的设置，来让颜色可以实现不透明度的效果。值的范围介于0-1之间。</p><p>opacity的效果同样是不透明度，但是通过opacity设置的不透明度，会导致元素上的内容也随之变得透明。</p><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>css3中新增加了渐变的效果，一般来说，渐变可以分成三种类型：</p><ul><li>线性渐变(从一个方向到另外一个方向)</li><li>径向渐变(从一个点向四周扩散)</li><li>重复渐变(重复线性渐变、重复径向渐变)</li></ul><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>在css3中，可以通过linear-gradient属性来实现线性渐变。该属性的语法如下：</p><pre><code class="hljs css">linear-gradient: point | angle color percentage;</code></pre><ul><li>point表示方向，angle表示角度。</li><li>color表示颜色，一般分为起始颜色、过渡颜色和结束颜色。</li><li>percentage表示百分比，一般表示颜色渐变过程中的百分比。</li></ul><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;<span class="css">        <span class="hljs-selector-tag">background-image</span>: <span class="hljs-selector-tag">linear-gradient</span>(<span class="hljs-selector-tag">red</span>, <span class="hljs-selector-id">#e3e3e3</span>);</span>    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122230816.png"></p><p>可以通过设置方向来调整渐变的方向。</p><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 300px;        height: 200px;<span class="css">        <span class="hljs-selector-tag">background-image</span>: <span class="hljs-selector-tag">linear-gradient</span>(<span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">right</span>,<span class="hljs-selector-tag">red</span>, <span class="hljs-selector-id">#e3e3e3</span>);</span>    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122231151.png"></p><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p>通过radial-gradient可以设置径向渐变，基础语法如下:</p><pre><code class="hljs css"><span class="hljs-selector-tag">radial-gradient</span>(<span class="hljs-selector-tag">shape</span> <span class="hljs-selector-tag">size</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">position</span>, <span class="hljs-selector-tag">start-color</span>, ..., <span class="hljs-selector-tag">last-color</span>);</code></pre><ul><li>shape 渐变的形状，ellipse 表示椭圆形，circle 表示圆形。默认是ellipse ，如果元素为正方形，则圆形和椭圆形显示一样。</li><li>size 渐变的大小，包括四个值，<strong>closest-side</strong>：最近边； <strong>farthest-side</strong>：最远边； <strong>closest-corner</strong>：最近角； <strong>farthest-corner</strong>：最远角</li><li>color 变化的颜色</li></ul><p>示例代码：</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 400px;        height: 200px;        background-image: radial-gradient(closest-side ellipse,red, orange);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122233806.png"></p><p>也可以通过多背景来设置多个径向渐变。</p><p>示例代码:</p><pre><code class="hljs html">html代码:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>css代码:<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.content</span> &#123;</span>        width: 400px;        height: 600px;        background: radial-gradient(ellipse at top,  blue,transparent),            radial-gradient(ellipse  at bottom, red, transparent);    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>实际效果:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201122234506.png"></p><h3 id="重复渐变"><a href="#重复渐变" class="headerlink" title="重复渐变"></a>重复渐变</h3><p>重复渐变主要分为:</p><ul><li>repeating-linear-gradient() 重复线性渐变</li><li>repeating-radial-gradient() 重复径向渐变</li></ul><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><p>通过transition属性即可完成过渡效果。</p><p>基础语法格式如下:</p><pre><code class="hljs css"><span class="hljs-selector-tag">transition</span>: <span class="hljs-selector-tag">property</span> <span class="hljs-selector-tag">duration</span> <span class="hljs-selector-tag">timing-function</span> <span class="hljs-selector-tag">delay</span>;</code></pre><ul><li>property 规定应用过度的css属性名称</li><li>duration 定义过渡效果需要时间 单位s|ms</li><li>timing-function 规定过渡效果的时间曲线，默认是“ease”<ul><li>cubic-bezier (n,n,n,n)  贝塞尔曲线  <a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a></li><li>linear 规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）</li><li>ease   规定慢速开始，然后变快，然后慢速结束的过渡效果(cubic-bezier(0.25,0.1,0.25,1))</li><li>ease-in    规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）</li><li>ease-out  慢速结束过渡效果 等于 cubic-bezier(0,0,0.58,1)</li><li>ease-in-out     规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）</li></ul></li><li>delay   延迟  单位 s|ms</li></ul><blockquote><p>给不同的属性设置过渡: transition: width 2s 1s,height 2s 2s,background-color 3s 1s;</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css3,前端,前端教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端开发规范</title>
    <link href="/2020/11/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <url>/2020/11/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p><img src="https://unsplash.it/1600/900?random" alt="风景"></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在项目开发过程中，往往需要多人配合才能完成项目的开发，如果这个时候没有相同的规范约束，往往整个开发过程就会变得一团糟。</p><p>无规矩不成方圆，就比如在路上行车时，如果没有交通规则的限制，没有红绿灯，没有限速，谁还敢上路行驶。站在软件的层面来说，适当的规范和标准不是为了消灭内容的创造性和优雅性，而是为了限制过度的个性化，以一种普遍认同的方式统一做事，从而提升开发效率，降低沟通成本。最终让代码变得更加的稳定、强壮。</p><p>一旦规范制定成功，就必须要严格遵守，完全按照开发的规范来进行开发。</p><p>在本文档中，共包括：</p><ul><li>HTML 规范</li><li>图片规范</li><li>CSS规范</li><li>命名规范</li><li>JavaScript规范</li></ul><blockquote><p>不同的项目团队或者说不同的公司可能会存在不同的规范，在这一点是需要注意并且格外小心的。</p></blockquote><h2 id="HTML-规范"><a href="#HTML-规范" class="headerlink" title="HTML 规范"></a>HTML 规范</h2><h3 id="网页声明"><a href="#网页声明" class="headerlink" title="网页声明"></a>网页声明</h3><p>html文件必须加上DOCTYPE 声明，并且统一使用HTML5文档声明：</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></code></pre><h3 id="页面语言LANG"><a href="#页面语言LANG" class="headerlink" title="页面语言LANG"></a>页面语言LANG</h3><p>lang属性的取值应该遵循互联网工程任务组-IETF(The Internet Engineering Task Force)制定的关于语言标签的文档<a href="http://tools.ietf.org/html/bcp47">BCP 47 - Tags for Identifying Languages</a>。</p><p>推荐使用属性值 <code>cmn-Hans-CN</code>（简体, 中国大陆），但是在国内项目开发中，考虑到浏览器的兼容性和操作系统的兼容性，推荐设置下面的值：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span></code></pre><p>下面列出了更多的语言参考：</p><pre><code class="hljs less"><span class="hljs-selector-tag">zh-SG</span> 中文 (简体, 新加坡)   对应 <span class="hljs-selector-tag">cmn-Hans-SG</span> 普通话 (简体, 新加坡)<span class="hljs-selector-tag">zh-HK</span> 中文 (繁体, 香港)     对应 <span class="hljs-selector-tag">cmn-Hant-HK</span> 普通话 (繁体, 香港)<span class="hljs-selector-tag">zh-MO</span> 中文 (繁体, 澳门)     对应 <span class="hljs-selector-tag">cmn-Hant-MO</span> 普通话 (繁体, 澳门)<span class="hljs-selector-tag">zh-TW</span> 中文 (繁体, 台湾)     对应 <span class="hljs-selector-tag">cmn-Hant-TW</span> 普通话 (繁体, 台湾)</code></pre><p><strong>已经废弃的不推荐使用的Languages Tags</strong></p><p>以下写法已于 2009 年废弃，请勿使用（cmn、wuu、yue、gan 等已由 2005 年的 extlang 升级到 2009 年的 language）：</p><pre><code class="hljs avrasm"><span class="hljs-built_in">zh</span>-cmn, <span class="hljs-built_in">zh</span>-cmn-Hans, <span class="hljs-built_in">zh</span>-cmn-Hant, <span class="hljs-built_in">zh</span>-wuu, <span class="hljs-built_in">zh</span>-yue, <span class="hljs-built_in">zh</span>-gan</code></pre><p>以下写法已于 2009 年废弃，不推荐使用：</p><pre><code class="hljs avrasm"><span class="hljs-built_in">zh</span>-Hans, <span class="hljs-built_in">zh</span>-Hans-CN, <span class="hljs-built_in">zh</span>-Hans-SG, <span class="hljs-built_in">zh</span>-Hans-HK, <span class="hljs-built_in">zh</span>-Hans-MO, <span class="hljs-built_in">zh</span>-Hans-TW, <span class="hljs-built_in">zh</span>-Hant, <span class="hljs-built_in">zh</span>-Hant-CN, <span class="hljs-built_in">zh</span>-Hant-SG, <span class="hljs-built_in">zh</span>-Hant-HK, <span class="hljs-built_in">zh</span>-Hant-MO, <span class="hljs-built_in">zh</span>-Hant-TW</code></pre><p>更多已经废弃的Language Tags参考 <a href="http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry">IANA Language Subtag Registry</a> 里面的 “Type: redundant“。</p><p><strong>更多关于 Languages Tags ：</strong></p><p><a href="http://www.w3.org/International/articles/language-tags/">W3C Language tags in HTML and XML</a></p><p><a href="http://www.zhihu.com/question/20797118?utm_source=weibo&utm_medium=weibo_share&utm_content=share_question&utm_campaign=share_sidebar">网页头部的声明应该是用 lang=”zh” 还是 lang=”zh-cn”？</a></p><h3 id="CHARSET"><a href="#CHARSET" class="headerlink" title="CHARSET"></a>CHARSET</h3><p>在HTML5中默认的字符编码就是UTF-8。</p><p>在项目开发中，一般情况建议统一使用”UTF-8”编码。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></code></pre><p>请尽量的设置成”UTF-8”，而不是写成”utf-8”、”utf8”或者”UTF8”。根据 <a href="http://www.ietf.org/rfc/rfc3629">IETF对UTF-8的定义</a>，其编码标准的写法是 “UTF-8”；而 UTF8 或 utf8 的写法只是出现在某些编程系统中，如 .NET framework 的类 System.Text.Encoding 中的一个属性名就叫 UTF8。</p><h3 id="元素及标签闭合"><a href="#元素及标签闭合" class="headerlink" title="元素及标签闭合"></a>元素及标签闭合</h3><p>在HTML中，标签可以分为五种:</p><ul><li>空元素：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr</li><li>原始文本元素：script、style</li><li>RCDATA元素：textarea、title</li><li>外来元素：来自MathML命名空间和SVG命名空间的元素。</li><li>常规元素：其他HTML允许的元素都称为常规元素。</li></ul><p>一般来说，元素的闭合应该遵循下面的规则：</p><ul><li>原始文本元素、RCDATA元素以及常规元素都有一个开始标签来表示开始，一个结束标签来表示结束。</li><li><a href="http://www.w3.org/TR/html5/syntax.html#optional-tags">某些元素的开始和结束标签是可以省略的</a>，如果规定标签不能被省略，那么就绝对不能省略它。</li><li>空元素只有一个开始标签，且不能为空元素设置结束标签。</li><li>外来元素可以有一个开始标签和配对的结束标签，或者只有一个自闭合的开始标签，且后者情况下该元素不能有结束标签。</li></ul><p>在项目开发中，为了让浏览器更好的解析代码以及让代码具有更好的可读性，需要遵守下面的约定：</p><ul><li>所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上。</li><li>空元素标签都不加 “/” 字符</li></ul><p>例如下面的代码就是一种不推荐的写法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是h1标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一段文字，我有始无终，浏览器亦能正确解析<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></code></pre><h3 id="书写风格"><a href="#书写风格" class="headerlink" title="书写风格"></a>书写风格</h3><p><strong>HTML代码大小写</strong></p><p>HTML标签名、类名、标签属性和大部分属性值统一用小写，下面是一种推荐写法：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>不推荐下面的写法：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;DEMO&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">DIV</span> <span class="hljs-attr">CLASS</span>=<span class="hljs-string">&quot;DEMO&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">DIV</span>&gt;</span></code></pre><p>HTML文本、CDATA、JavaScript、meta标签某些属性等内容可大小写混合。</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 优先使用 IE 最新版本和 Chrome Frame --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- HTML文本内容 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>I AM WHAT I AM <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-comment">&lt;!-- JavaScript 内容 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"><span class="hljs-keyword">var</span> demoName = <span class="hljs-string">&#x27;demoName&#x27;</span>;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!-- CDATA 内容 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span>&lt;![CDATA[...]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><strong>类型属性</strong></p><p>不需要为 CSS、JS 指定类型属性，HTML5 中默认已包含：</p><p>下面是推荐的写法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><em>不推荐：</em></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><strong>元素属性</strong></p><ul><li>元素的属性值使用双引号语法</li><li>元素属性值可以写上的都写上</li></ul><p>下面是推荐的写法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> &gt;</span></code></pre><p>不推荐的写法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">checked</span> &gt;</span></code></pre><p><strong>特殊字符的引用</strong></p><p>文本可以和字符引用混合出现。这种方法可以用来转义在文本中不能合法出现的字符。</p><p>在 HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体。</p><p>下面是推荐的写法：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>more<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><p>不推荐的写法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>more&gt;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><p><strong>纯数字输入框</strong></p><p>使用input的type类型为<code>tel</code>，而不是number。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span></code></pre><p><strong>代码嵌套</strong></p><p>元素嵌套规范，每个块状元素独立一行，内联元素可选。</p><p>推荐的写法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><p>不推荐的写法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><p>段落元素与标题元素只能嵌套内联元素。</p><p>推荐写法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><p>不推荐写法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><p><strong>文本中的英文</strong></p><p>在网页中的英文不能随意的换行，会增加额外的空格。</p><p>推荐的写法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>   hello,world!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><p>不推荐的写法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hello,    world    ！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><p><strong>class属性问题</strong></p><p>如果class的属性并没有对应的css代码，那么需要将class属性值删除掉，而不是继续留在class属性里。</p><p>例如：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><span class="hljs-comment">/*没有demo1对应的css*/</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span>Hello,World!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>此时demo1这个类名最好删除</code></pre><p><strong>缩进</strong></p><p>代码统一以四个空格进行缩进，保证代码的清晰。</p><p>同时嵌套的节点应该进行缩进。</p><h3 id="webapp-meta标签的设置"><a href="#webapp-meta标签的设置" class="headerlink" title="webapp meta标签的设置"></a>webapp meta标签的设置</h3><p>webapp可以通过设置meta标签来改变页面的一些表现。</p><p>下面是对于meta标签的一些设置：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, </span></span><span class="hljs-tag"><span class="hljs-string">maximum-scale=1.0, user-scalable=no&quot;</span>&gt;</span></code></pre><ul><li>width – viewport的宽度</li><li>height – viewport的高度</li><li>initial-scale – 初始的缩放比例</li><li>minimum-scale – 允许用户缩放到的最小比例</li><li>maximum-scale – 允许用户缩放到的最大比例</li><li>user-scalable – 是否允许用户缩放</li></ul><p>下面是设置WebApp是否进入全屏模式，该设置需要添加到主屏幕才生效。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span></code></pre><ul><li>content设置 yes 进入全屏模式</li><li>默认会启动 Safari 应用，使用 Safari 应用浏览</li><li>通过检测 window.navigator.standalone 的 Boolean 值可以判断 web 应用是否处于全屏模式</li></ul><p>下面是为WebApp设置状态栏样式：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;black&quot;</span>&gt;</span></code></pre><ul><li>此 meta 设置只在全屏模式生效</li><li>默认值是 default</li><li>content=”black”，状态栏背景黑色，网页内容在状态栏下面</li><li>content=”black-translucent”，状态栏半透明，背景黑色，网页内容占满全屏</li></ul><p>自动识别页面中有可能是电话格式的数字。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format-detection&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;telephone=no&quot;</span>&gt;</span></code></pre><p>iOS中的 Safari 会默认识别与电话格式相似的数字并生成一个可以拉起电话应用并将该数字作为电话号码拨打的链接。定义 telephone=no 可以屏蔽该功能。</p><h2 id="图片规范"><a href="#图片规范" class="headerlink" title="图片规范"></a>图片规范</h2><h3 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h3><p>常见的图片格式有 GIF、PNG8、PNG24、JPEG、WEBP，根据图片格式的特性和场景需要选取适合的图片格式。</p><h4 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h4><p>GIF图象是基于颜色列表的（存储的数据是该点的颜色对应于颜色列表的索引值），最多只支持8位（256色）。GIF文件内部分成许多存储块，用来存储多幅图象或者是决定图象表现行为的控制块，用以实现动画和交互式应用。GIF文件还通过LZW压缩算法压缩图象数据来减少图象尺寸。</p><p>gif图片的特性:</p><ul><li>优秀的压缩算法使其在一定程度上保证图像质量的同时将体积变得很小。</li><li>可插入多帧，从而实现动画效果。</li><li>可设置透明色以产生对象浮现于背景之上的效果。</li><li>由于采用了8位压缩，最多只能处理256种颜色，故不宜应用于真彩色图片。</li></ul><h4 id="PNG格式"><a href="#PNG格式" class="headerlink" title="PNG格式"></a>PNG格式</h4><p>PNG是20世纪90年代中期开始开发的图像文件存储格式，其目的是企图替代GIF和TIFF文件格式，同时增加一些GIF文件格式所不具备的特性。流式网络图形格式(Portable Network Graphic Format，PNG)名称来源于非官方的“PNG’s Not GIF”，是一种位图文件(bitmap file)存储格式，读成“ping”。PNG用来存储灰度图像时，灰度图像的深度可多到16位，存储彩色图像时，彩色图像的深度可多到48位，并且还可存储多到16位的α通道数据。PNG使用从LZ77派生的无损数据压缩算法。</p><p>png图片特性：</p><ul><li>支持256色调色板技术，文件体积小。</li><li>无损压缩</li><li>最高支持48位真彩色图像以及16位灰度图像。</li><li>支持Alpha通道的透明/半透明特性。</li><li>支持图像亮度的Gamma校准信息。</li><li>支持存储附加文本信息，以保留图像名称、作者、版权、创作时间、注释等信息。</li><li>渐近显示和流式读写，适合在网络传输中快速显示预览效果后再展示全貌。</li><li>使用CRC防止文件出错。</li><li>最新的PNG标准允许在一个文件内存储多幅图像。</li></ul><h4 id="JPEG"><a href="#JPEG" class="headerlink" title="JPEG"></a>JPEG</h4><p>JPEG是一种针对照片视频而广泛使用的一种有损压缩标准方法。这个名称代表Joint Photographic Experts Group（联合图像专家小组）。此团队创立于公元1986年，1992年发布了JPEG的标准而在1994年获得了ISO 10918-1的认定。</p><p>jpeg图片特性:</p><ul><li>适用于储存24位元全采影像</li><li>采取的压缩方式通常为有损压缩</li><li>不支持透明或动画</li><li>压缩比越高影像耗损越大，失真越严重</li><li>压缩比在10左右肉眼无法分辨出压缩图与原图的差别</li></ul><h4 id="WEBP"><a href="#WEBP" class="headerlink" title="WEBP"></a>WEBP</h4><p>WebP，是一种同时提供了有损压缩与无损压缩的图片文件格式，派生自视频编码格式 VP8，是由Google在购买On2 Technologies后发展出来。WebP最初在2010年发布，2011年11月8日，Google开始让WebP支持无损压缩和透明色的功能，而在2012年8月16日的参考实做libwebp 0.2.0中正式支持。</p><p>webp特性:</p><ul><li>同时提供有损压缩和无损压缩两种图片文件格式</li><li>文件体积小，无损压缩后，比 PNG 文件少了 45％ 的文件大小；有损压缩后，比 JPEG 文件少了 25% - 34% 文件大小</li><li>浏览器兼容差，目前只支持客户端 Chrome 和 Opera 浏览器以及安卓原生浏览器(Andriod 4.0+)，<a href="https://developers.google.com/speed/webp/faq#which_web_browsers_natively_support_webp">WebP兼容性</a></li></ul><p><strong>开发建议:</strong></p><p><em>内容图</em></p><p>内容图多以商品图等照片类图片形式存在，颜色较为丰富，文件体积较大</p><ul><li>优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式</li><li>尽量不使用PNG格式，PNG8 色位太低，PNG24 压缩率低，文件体积大</li></ul><p><em>背景图</em></p><p>背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片</p><ul><li>PNG 与 GIF 格式，优先考虑使用 PNG 格式,PNG格式允许更多的颜色并提供更好的压缩率</li><li>图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8 格式，避免不使用 JPEG 格式</li><li>图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式</li><li>图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式</li><li>条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式</li></ul><h3 id="图片大小的建议"><a href="#图片大小的建议" class="headerlink" title="图片大小的建议"></a>图片大小的建议</h3><p>中国普通家庭的宽带基本能达到8Mbps，实际速率大约为500—900KB/s，全国3G/4G用户占有比超过了50%，为了保证图片能更好地加载展示给用户看，团队约定：</p><p><strong>PC平台单张的图片的大小不应大于 200KB。</strong></p><p><strong>移动平台单张的图片的大小不应大于 100KB。</strong></p><p><em>（图片的大小约定标准随全国网速的改变而改变）</em></p><h3 id="图片质量"><a href="#图片质量" class="headerlink" title="图片质量"></a>图片质量</h3><ul><li>上线的图片都应该经过压缩处理，压缩后的图片不应该出现肉眼可感知的失真区域</li><li>60质量的JPEG格式图片与质量大于60的相比，肉眼已看不出明显的区别，因此保存 JPEG 图的时候，质量一般控制在60，若保真度要求高的图片可适量提高到 80，图片大小控制在 200KB 以内</li></ul><h3 id="图片的引入"><a href="#图片的引入" class="headerlink" title="图片的引入"></a>图片的引入</h3><p>测试内容图应该写上表明图片尺寸的占位图，可以用线上占位图生成服务，如下面的网址，可以生成在线的占位图片：</p><pre><code class="hljs html">https://tool.lu/imageholder/</code></pre><p>HTML 中图片引入不需添加 width、height 属性，alt 属性应该写上:</p><pre><code class="hljs html">推荐写法<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> &gt;</span>不推荐写法<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;&quot;</span> &gt;</span></code></pre><p>CSS 中图片引入不需要引号：</p><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(icon.png);&#125;</code></pre><p><strong>CSS Sprites VS Data URIs</strong></p><p>CSS Sprites特点</p><ul><li>减少请求数</li><li>加速图片的显示</li><li>维护更新成本大</li><li>更多的内存消耗，特别是大体积或有过多空白的 Sprites 图</li><li>图片渗漏，相邻的不需展示的图片有可能出现在展示元素中，特别是在高清设备移动设备上</li></ul><p>Data URIs（base64编码）</p><ul><li>减少请求数</li><li>转换文件体积大，大约比原始的二进制大33%</li><li>IE6 / IE7 不支持</li><li>图片显示相对较慢，需要更多的CPU消耗</li></ul><p>开发约定:</p><p><em>CSS Sprites 使用建议</em></p><ul><li>适合使用频率高更新频率低的小图标</li><li>尽量不留太多的空白</li><li>体积较大的图片不合并</li><li>确保要合并的小图坐标数值和合并后的 Sprites 图尺寸均为偶数</li></ul><p>Data URIs（base64编码）使用建议</p><ul><li>适合更新频率高的小图片，如某些具备自定义功能的标题icon等</li><li>转换成 Base64 编码的图片应小于 2KB</li><li>移动端不使用 Base64 编码</li><li>要兼容 IE6/IE7 的不使用</li></ul><h2 id="CSS-规范"><a href="#CSS-规范" class="headerlink" title="CSS 规范"></a>CSS 规范</h2><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><h4 id="css字符编码"><a href="#css字符编码" class="headerlink" title="css字符编码"></a>css字符编码</h4><p>在样式表文档中，样式文件必须写上@charset规则，并且一定要在样式文件的第一行首个字符位置开始写，编码名使用”UTF-8”。</p><p>字符@charset都使用小写字母，不能出现转义符。</p><p>推荐写法:</p><pre><code class="hljs css"><span class="hljs-keyword">@charset</span> <span class="hljs-string">&quot;UTF-8&quot;</span>;<span class="hljs-selector-class">.content</span> &#123;&#125;</code></pre><p>不推荐的写法:</p><pre><code class="hljs css"><span class="hljs-comment">/**</span><span class="hljs-comment">* 注释</span><span class="hljs-comment">**/</span><span class="hljs-keyword">@charset</span> <span class="hljs-string">&quot;UTF-8&quot;</span>;<span class="hljs-selector-class">.content</span> &#123;&#125;</code></pre><pre><code class="hljs css"><span class="hljs-keyword">@CHARSET</span> <span class="hljs-string">&quot;UTF-8&quot;</span>;<span class="hljs-selector-class">.content</span> &#123;&#125;</code></pre><pre><code class="hljs css"><span class="hljs-selector-class">.content</span> &#123;&#125;</code></pre><h4 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h4><p>样式书写一般分为两种: </p><p>第一种是紧凑型格式(Compact):</p><pre><code class="hljs css"><span class="hljs-selector-class">.content</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;&#125;</code></pre><p>第二种是展开格式(Extended):</p><pre><code class="hljs css"><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;&#125;</code></pre><p>在这统一推荐使用展开格式。</p><h4 id="代码大小写"><a href="#代码大小写" class="headerlink" title="代码大小写"></a>代码大小写</h4><p>样式选择器，属性名以及属性值关键字全部采用小写字母：</p><pre><code class="hljs css"><span class="hljs-comment">/*推荐的写法*/</span><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;&#125;<span class="hljs-comment">/*不推荐的写法*/</span><span class="hljs-selector-class">.CONTENT</span> &#123;    <span class="hljs-attribute">WIDTH</span>: <span class="hljs-number">300PX</span>;&#125;</code></pre><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><ul><li>尽量少用通用选择器<code>*</code></li><li>不使用ID选择器</li><li>不使用无具体语义定义的标签选择器</li></ul><pre><code class="hljs css"><span class="hljs-comment">/*推荐的写法*/</span><span class="hljs-selector-class">.list</span> &#123;&#125; <span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> &#123;&#125;<span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">p</span> &#123;&#125;<span class="hljs-comment">/*不推荐的写法*/</span>. &#123;&#125;<span class="hljs-selector-id">#content</span> &#123;&#125;<span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">div</span> &#123;&#125;</code></pre><h4 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h4><p>统一使用四个空格进行代码缩进，使得各个编辑器表现一致：</p><pre><code class="hljs css"><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;&#125;</code></pre><h4 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h4><p>每个属性的末尾都需要添加分号:</p><pre><code class="hljs css"><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">display</span>: block;&#125;</code></pre><h4 id="代码易读性"><a href="#代码易读性" class="headerlink" title="代码易读性"></a>代码易读性</h4><p>左括号和类名之间一个空格，冒号与属性值之间一个空格:</p><pre><code class="hljs css"><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;&#125;</code></pre><p>不推荐的写法:</p><pre><code class="hljs css"><span class="hljs-selector-class">.content</span>&#123;    <span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;&#125;</code></pre><p>逗号分隔的取值，逗号之后一个空格：</p><pre><code class="hljs css"><span class="hljs-comment">/*推荐写法*/</span><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">#333</span>, <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">#ccc</span>;&#125;<span class="hljs-comment">/*不推荐写法*/</span><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">#333</span>,<span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">#ccc</span>;&#125;</code></pre><p>为单个css选择器或新申明开启新行:</p><p>推荐写法:</p><pre><code class="hljs css"><span class="hljs-selector-class">.list</span>,<span class="hljs-selector-class">.content</span>,<span class="hljs-selector-class">.nav</span> &#123;    <span class="hljs-attribute">color</span>: <span class="hljs-number">#222222</span>;&#125;<span class="hljs-selector-class">.nav</span> &#123;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;&#125;</code></pre><p>不推荐的写法:</p><pre><code class="hljs css"><span class="hljs-selector-class">.list</span>, <span class="hljs-selector-class">.content</span>, <span class="hljs-selector-class">.nav</span> &#123;    <span class="hljs-attribute">color</span>: <span class="hljs-number">#222222</span>;&#125;</code></pre><p>颜色值 <code>rgb()</code> <code>rgba()</code> <code>hsl()</code> <code>hsla()</code> <code>rect()</code> 中不需有空格，且取值不要带有不必要的 0。</p><p>例如：</p><pre><code class="hljs css"><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,.<span class="hljs-number">5</span>);&#125;</code></pre><p>不推荐的写法:</p><pre><code class="hljs css"><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>( <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span> );&#125;</code></pre><p>不要为0指明单位：</p><pre><code class="hljs css"><span class="hljs-comment">/*推荐写法*/</span><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;&#125;<span class="hljs-comment">/*不推荐写法*/</span><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> <span class="hljs-number">10px</span>;&#125;</code></pre><h4 id="属性值引号"><a href="#属性值引号" class="headerlink" title="属性值引号"></a>属性值引号</h4><p>css属性值需要用到引号时，统一使用单引号：</p><pre><code class="hljs css"><span class="hljs-comment">/* 推荐 */</span><span class="hljs-selector-class">.content</span> &#123; <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Hiragino Sans GB&#x27;</span>;&#125;<span class="hljs-comment">/* 不推荐 */</span><span class="hljs-selector-class">.content</span> &#123; <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Hiragino Sans GB&quot;</span>;&#125;</code></pre><h4 id="属性书写顺序"><a href="#属性书写顺序" class="headerlink" title="属性书写顺序"></a>属性书写顺序</h4><p>在开发中编写属性应该遵循下面的顺序:</p><ol><li>布局定位属性：display / position / float / clear / visibility / overflow …</li><li>自身属性：width / height / margin / padding / border / background …</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word …</li><li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li></ol><pre><code class="hljs css"><span class="hljs-selector-class">.conetnt</span> &#123;    <span class="hljs-attribute">display</span>: block;    <span class="hljs-attribute">position</span>: relative;    <span class="hljs-attribute">float</span>: left;    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;    <span class="hljs-attribute">font-family</span>: Arial, <span class="hljs-string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">5</span>);    <span class="hljs-attribute">-webkit-border-radius</span>: <span class="hljs-number">10px</span>;    <span class="hljs-attribute">-moz-border-radius</span>: <span class="hljs-number">10px</span>;    <span class="hljs-attribute">-o-border-radius</span>: <span class="hljs-number">10px</span>;    <span class="hljs-attribute">-ms-border-radius</span>: <span class="hljs-number">10px</span>;    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;&#125;</code></pre><p>如果需要设置浏览器前缀，浏览器私有前缀在前，标准前缀在后：</p><pre><code class="hljs css"><span class="hljs-selector-class">.content</span> &#123;    <span class="hljs-attribute">-webkit-border-radius</span>: <span class="hljs-number">10px</span>;    <span class="hljs-attribute">-moz-border-radius</span>: <span class="hljs-number">10px</span>;    <span class="hljs-attribute">-o-border-radius</span>: <span class="hljs-number">10px</span>;    <span class="hljs-attribute">-ms-border-radius</span>: <span class="hljs-number">10px</span>;    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;&#125;</code></pre><h3 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>注释内容第一个字符和最后一个字符都是一个空格字符，单独占一行，行与行之间相隔一行。</p><p>推荐写法:</p><pre><code class="hljs css"><span class="hljs-comment">/* Comment Text */</span><span class="hljs-selector-class">.content</span>&#123;&#125;<span class="hljs-comment">/* Comment Text */</span><span class="hljs-selector-class">.list</span>&#123;&#125;</code></pre><p>不推荐写法:</p><pre><code class="hljs css"><span class="hljs-comment">/*Comment Text*/</span><span class="hljs-selector-class">.content</span>&#123;<span class="hljs-attribute">display</span>: block;&#125;<span class="hljs-selector-class">.list</span>&#123;<span class="hljs-attribute">display</span>: block;<span class="hljs-comment">/*Comment Text*/</span>&#125;</code></pre><h4 id="模块注释"><a href="#模块注释" class="headerlink" title="模块注释"></a>模块注释</h4><p>注释内容第一个字符和最后一个字符都是一个空格字符，<code>/*</code> 与 模块信息描述占一行，多个横线分隔符<code>-</code>与<code>*/</code>占一行，行与行之间相隔两行。</p><p>推荐写法:</p><pre><code class="hljs css"><span class="hljs-comment">/* Module A</span><span class="hljs-comment">---------------------------------------------------------------- */</span><span class="hljs-selector-class">.mod_a</span> &#123;&#125;<span class="hljs-comment">/* Module B</span><span class="hljs-comment">---------------------------------------------------------------- */</span><span class="hljs-selector-class">.mod_b</span> &#123;&#125;</code></pre><p>不推荐写法:</p><pre><code class="hljs css"><span class="hljs-comment">/* Module A ---------------------------------------------------- */</span><span class="hljs-selector-class">.mod_a</span> &#123;&#125;<span class="hljs-comment">/* Module B ---------------------------------------------------- */</span><span class="hljs-selector-class">.mod_b</span> &#123;&#125;</code></pre><h4 id="文件信息注释"><a href="#文件信息注释" class="headerlink" title="文件信息注释"></a>文件信息注释</h4><p>在样式文件编码声明 <code>@charset</code> 语句下面注明页面名称、作者、创建日期等信息。</p><pre><code class="hljs css"><span class="hljs-keyword">@charset</span> <span class="hljs-string">&quot;UTF-8&quot;</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @desc File Info</span><span class="hljs-comment"> * @author Author Name</span><span class="hljs-comment"> * @date update date</span><span class="hljs-comment"> */</span></code></pre><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><h3 id="类的命名"><a href="#类的命名" class="headerlink" title="类的命名"></a>类的命名</h3><p>className的命名应该尽量精短、明确，必须以字母开头命名，并且全部是小写字母，单词之间统一使用下划线”_”来进行连接。</p><p><strong>命名原则</strong></p><p>基于姓氏命名法(继承+外来)，例如：</p><blockquote><p>祖先模块不能出现下划线，除了是全站公用模块，如 <code>mod_</code> 系列的命名：</p></blockquote><pre><code class="hljs css">&lt;div class=&quot;modulename&quot;&gt;&lt;div class=&quot;modulename_info&quot;&gt;&lt;div class=&quot;modulename_son&quot;&gt;&lt;/div&gt;&lt;div class=&quot;modulename_son&quot;&gt;&lt;/div&gt;...&lt;/div&gt;&lt;/div&gt;&lt;!<span class="hljs-selector-tag">--</span> 这个是全站公用模块，祖先模块允许直接出现下划线 <span class="hljs-selector-tag">--</span>&gt;&lt;div class=&quot;mod_info&quot;&gt;&lt;div class=&quot;mod_info_son&quot;&gt;&lt;/div&gt;&lt;div class=&quot;mod_info_son&quot;&gt;&lt;/div&gt;...&lt;/div&gt;</code></pre><p>不推荐的写法:</p><pre><code class="hljs css">&lt;div class=&quot;modulename_info&quot;&gt;&lt;div class=&quot;modulename_info_son&quot;&gt;&lt;/div&gt;&lt;div class=&quot;modulename_info_son&quot;&gt;&lt;/div&gt;...&lt;/div&gt;</code></pre><p>在子孙模块数量可预测的情况下，严格继承祖先模块的命名前缀:</p><pre><code class="hljs css">&lt;div class=&quot;modulename&quot;&gt;&lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;&lt;div class=&quot;modulename_info&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>当子孙模块超过4级或以上的时候，可以考虑在祖先模块内具有识辨性的独立缩写作为新的子孙模块。</p><p>推荐:</p><pre><code class="hljs css">&lt;div class=&quot;modulename&quot;&gt;&lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;&lt;div class=&quot;modulename_info&quot;&gt;    &lt;div class=&quot;modulename_info_user&quot;&gt;    &lt;div class=&quot;modulename_info_user_img&quot;&gt;    &lt;img src=&quot;&quot; alt=&quot;&quot;&gt;    &lt;!<span class="hljs-selector-tag">--</span> 这个时候 <span class="hljs-selector-tag">miui</span> 为 <span class="hljs-selector-tag">modulename_info_user_img</span> 首字母缩写<span class="hljs-selector-tag">--</span>&gt;    &lt;div class=&quot;miui_tit&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;miui_txt&quot;&gt;&lt;/div&gt;    ...    &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;modulename_info_list&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>不推荐:</p><pre><code class="hljs css">&lt;div class=&quot;modulename&quot;&gt;&lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;&lt;div class=&quot;modulename_info&quot;&gt;    &lt;div class=&quot;modulename_info_user&quot;&gt;    &lt;div class=&quot;modulename_info_user_img&quot;&gt;    &lt;img src=&quot;&quot; alt=&quot;&quot;&gt;    &lt;div class=&quot;modulename_info_user_img_tit&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;modulename_info_user_img_txt&quot;&gt;&lt;/div&gt;    ...    &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;modulename_info_list&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><h3 id="模块命名"><a href="#模块命名" class="headerlink" title="模块命名"></a>模块命名</h3><p>全站公共模块：以 <code>mod_</code> 开头:</p><pre><code class="hljs css">&lt;div class=&quot;mod_yours&quot;&gt;&lt;/div&gt;</code></pre><p>业务公共模块：以 <code>业务名_mod_</code> 开头:</p><pre><code class="hljs css">&lt;div class=&quot;wx_mod_yours&quot;&gt;&lt;/div&gt;</code></pre><h3 id="常用命名推荐"><a href="#常用命名推荐" class="headerlink" title="常用命名推荐"></a>常用命名推荐</h3><p><strong>注意</strong>：ad、banner、gg、guanggao 等有机会和广告挂勾的字眠不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此</p><pre><code class="hljs css">&lt;div class=&quot;ad&quot;&gt;&lt;/div&gt;</code></pre><p>这种广告的英文或拼音类名不应该出现</p><p>另外，<strong>敏感不和谐字眼</strong>也不应该出现，如：</p><pre><code class="hljs css">&lt;div class=&quot;fuck&quot;&gt;&lt;/div&gt;&lt;div class=&quot;jer&quot;&gt;&lt;/div&gt;&lt;div class=&quot;sm&quot;&gt;&lt;/div&gt;&lt;div class=&quot;gcd&quot;&gt;&lt;/div&gt; &lt;div class=&quot;ass&quot;&gt;&lt;/div&gt; &lt;div class=&quot;KMT&quot;&gt;&lt;/div&gt; ...</code></pre><table><thead><tr><th align="left">ClassName</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">about</td><td align="left">关于</td></tr><tr><td align="left">account</td><td align="left">账户</td></tr><tr><td align="left">arrow</td><td align="left">箭头图标</td></tr><tr><td align="left">article</td><td align="left">文章</td></tr><tr><td align="left">aside</td><td align="left">边栏</td></tr><tr><td align="left">audio</td><td align="left">音频</td></tr><tr><td align="left">avatar</td><td align="left">头像</td></tr><tr><td align="left">bg,background</td><td align="left">背景</td></tr><tr><td align="left">bar</td><td align="left">栏（工具类）</td></tr><tr><td align="left">branding</td><td align="left">品牌化</td></tr><tr><td align="left">crumb,breadcrumbs</td><td align="left">面包屑</td></tr><tr><td align="left">btn,button</td><td align="left">按钮</td></tr><tr><td align="left">caption</td><td align="left">标题，说明</td></tr><tr><td align="left">category</td><td align="left">分类</td></tr><tr><td align="left">chart</td><td align="left">图表</td></tr><tr><td align="left">clearfix</td><td align="left">清除浮动</td></tr><tr><td align="left">close</td><td align="left">关闭</td></tr><tr><td align="left">col,column</td><td align="left">列</td></tr><tr><td align="left">comment</td><td align="left">评论</td></tr><tr><td align="left">community</td><td align="left">社区</td></tr><tr><td align="left">container</td><td align="left">容器</td></tr><tr><td align="left">content</td><td align="left">内容</td></tr><tr><td align="left">copyright</td><td align="left">版权</td></tr><tr><td align="left">current</td><td align="left">当前态，选中态</td></tr><tr><td align="left">default</td><td align="left">默认</td></tr><tr><td align="left">description</td><td align="left">描述</td></tr><tr><td align="left">details</td><td align="left">细节</td></tr><tr><td align="left">disabled</td><td align="left">不可用</td></tr><tr><td align="left">entry</td><td align="left">文章，博文</td></tr><tr><td align="left">error</td><td align="left">错误</td></tr><tr><td align="left">even</td><td align="left">偶数，常用于多行列表或表格中</td></tr><tr><td align="left">fail</td><td align="left">失败（提示）</td></tr><tr><td align="left">feature</td><td align="left">专题</td></tr><tr><td align="left">fewer</td><td align="left">收起</td></tr><tr><td align="left">field</td><td align="left">用于表单的输入区域</td></tr><tr><td align="left">figure</td><td align="left">图</td></tr><tr><td align="left">filter</td><td align="left">筛选</td></tr><tr><td align="left">first</td><td align="left">第一个，常用于列表中</td></tr><tr><td align="left">footer</td><td align="left">页脚</td></tr><tr><td align="left">forum</td><td align="left">论坛</td></tr><tr><td align="left">gallery</td><td align="left">画廊</td></tr><tr><td align="left">group</td><td align="left">模块，清除浮动</td></tr><tr><td align="left">header</td><td align="left">页头</td></tr><tr><td align="left">help</td><td align="left">帮助</td></tr><tr><td align="left">hide</td><td align="left">隐藏</td></tr><tr><td align="left">hightlight</td><td align="left">高亮</td></tr><tr><td align="left">home</td><td align="left">主页</td></tr><tr><td align="left">icon</td><td align="left">图标</td></tr><tr><td align="left">info,information</td><td align="left">信息</td></tr><tr><td align="left">last</td><td align="left">最后一个，常用于列表中</td></tr><tr><td align="left">links</td><td align="left">链接</td></tr><tr><td align="left">login</td><td align="left">登录</td></tr><tr><td align="left">logout</td><td align="left">退出</td></tr><tr><td align="left">logo</td><td align="left">标志</td></tr><tr><td align="left">main</td><td align="left">主体</td></tr><tr><td align="left">menu</td><td align="left">菜单</td></tr><tr><td align="left">meta</td><td align="left">作者、更新时间等信息栏，一般位于标题之下</td></tr><tr><td align="left">module</td><td align="left">模块</td></tr><tr><td align="left">more</td><td align="left">更多（展开）</td></tr><tr><td align="left">msg,message</td><td align="left">消息</td></tr><tr><td align="left">nav,navigation</td><td align="left">导航</td></tr><tr><td align="left">next</td><td align="left">下一页</td></tr><tr><td align="left">nub</td><td align="left">小块</td></tr><tr><td align="left">odd</td><td align="left">奇数，常用于多行列表或表格中</td></tr><tr><td align="left">off</td><td align="left">鼠标离开</td></tr><tr><td align="left">on</td><td align="left">鼠标移过</td></tr><tr><td align="left">output</td><td align="left">输出</td></tr><tr><td align="left">pagination</td><td align="left">分页</td></tr><tr><td align="left">pop,popup</td><td align="left">弹窗</td></tr><tr><td align="left">preview</td><td align="left">预览</td></tr><tr><td align="left">previous</td><td align="left">上一页</td></tr><tr><td align="left">primary</td><td align="left">主要</td></tr><tr><td align="left">progress</td><td align="left">进度条</td></tr><tr><td align="left">promotion</td><td align="left">促销</td></tr><tr><td align="left">rcommd,recommendations</td><td align="left">推荐</td></tr><tr><td align="left">reg,register</td><td align="left">注册</td></tr><tr><td align="left">save</td><td align="left">保存</td></tr><tr><td align="left">search</td><td align="left">搜索</td></tr><tr><td align="left">secondary</td><td align="left">次要</td></tr><tr><td align="left">section</td><td align="left">区块</td></tr><tr><td align="left">selected</td><td align="left">已选</td></tr><tr><td align="left">share</td><td align="left">分享</td></tr><tr><td align="left">show</td><td align="left">显示</td></tr><tr><td align="left">sidebar</td><td align="left">边栏，侧栏</td></tr><tr><td align="left">slide</td><td align="left">幻灯片，图片切换</td></tr><tr><td align="left">sort</td><td align="left">排序</td></tr><tr><td align="left">sub</td><td align="left">次级的，子级的</td></tr><tr><td align="left">submit</td><td align="left">提交</td></tr><tr><td align="left">subscribe</td><td align="left">订阅</td></tr><tr><td align="left">subtitle</td><td align="left">副标题</td></tr><tr><td align="left">success</td><td align="left">成功（提示）</td></tr><tr><td align="left">summary</td><td align="left">摘要</td></tr><tr><td align="left">tab</td><td align="left">标签页</td></tr><tr><td align="left">table</td><td align="left">表格</td></tr><tr><td align="left">txt,text</td><td align="left">文本</td></tr><tr><td align="left">thumbnail</td><td align="left">缩略图</td></tr><tr><td align="left">time</td><td align="left">时间</td></tr><tr><td align="left">tips</td><td align="left">提示</td></tr><tr><td align="left">title</td><td align="left">标题</td></tr><tr><td align="left">video</td><td align="left">视频</td></tr><tr><td align="left">wrap</td><td align="left">容器，包，一般用于最外层</td></tr><tr><td align="left">wrapper</td><td align="left">容器，包，一般用于最外层</td></tr></tbody></table><h2 id="JavaScript-规范"><a href="#JavaScript-规范" class="headerlink" title="JavaScript 规范"></a>JavaScript 规范</h2><h3 id="语言规范"><a href="#语言规范" class="headerlink" title="语言规范"></a>语言规范</h3><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>对所有的引用都使用const,不要使用var :</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span><span class="hljs-comment">// good</span><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span></code></pre><p>如果引用是可变动的，则使用 <code>let</code>:</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-keyword">var</span> count = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">10</span>) &#123;  count += <span class="hljs-number">1</span>&#125;<span class="hljs-comment">// good</span><span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">10</span>) &#123;  count += <span class="hljs-number">1</span>&#125;</code></pre><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>使用字面量创建对象：</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>&#123;&#125;<span class="hljs-comment">// good</span><span class="hljs-keyword">const</span> a = &#123;&#125;</code></pre><p>别使用保留字作为对象的键值，这样在 IE8 下不会运行:</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> a = &#123;  <span class="hljs-keyword">default</span>: &#123;&#125;,  <span class="hljs-comment">// default 是保留字</span>  common: &#123;&#125;&#125;<span class="hljs-comment">// good</span><span class="hljs-keyword">const</span> a = &#123;  defaults: &#123;&#125;,  common: &#123;&#125;&#125;</code></pre><p>应该使用对象方法的简写属性:</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> item = &#123;  value: <span class="hljs-number">1</span>,  addValue: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;    <span class="hljs-keyword">return</span> item.value + val  &#125;&#125;<span class="hljs-comment">// good</span><span class="hljs-keyword">const</span> item = &#123;  value: <span class="hljs-number">1</span>,  <span class="hljs-function"><span class="hljs-title">addValue</span>(<span class="hljs-params">val</span>)</span> &#123;    <span class="hljs-keyword">return</span> item.value + val  &#125;&#125;</code></pre><p>请使用对象属性值的简写方式:</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> job = <span class="hljs-string">&#x27;FrontEnd&#x27;</span><span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> item = &#123;  job: job&#125;<span class="hljs-comment">// good</span><span class="hljs-keyword">const</span> item = &#123;  job&#125;</code></pre><p>对象属性值的简写方式要和声明式的方式分组:</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> job = <span class="hljs-string">&#x27;FrontEnd&#x27;</span><span class="hljs-keyword">const</span> department = <span class="hljs-string">&#x27;JDC&#x27;</span><span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> item = &#123;  sex: <span class="hljs-string">&#x27;male&#x27;</span>,  job,  age: <span class="hljs-number">25</span>,  department&#125;<span class="hljs-comment">// good</span><span class="hljs-keyword">const</span> item = &#123;  job,  department,  sex: <span class="hljs-string">&#x27;male&#x27;</span>,  age: <span class="hljs-number">25</span>&#125;</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>请使用字面量值创建数组：</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> items = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>()<span class="hljs-comment">// good</span><span class="hljs-keyword">const</span> items = []</code></pre><p>向数组中添加元素时，请使用 <code>push</code> 方法:</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> items = []<span class="hljs-comment">// bad</span>items[items.length] = <span class="hljs-string">&#x27;test&#x27;</span><span class="hljs-comment">// good</span>items.push(<span class="hljs-string">&#x27;test&#x27;</span>)</code></pre><p>使用扩展运算符<code>...</code>来复制数组:</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> items = []<span class="hljs-keyword">const</span> itemsCopy = []<span class="hljs-keyword">const</span> len = items.length<span class="hljs-keyword">let</span> i<span class="hljs-comment">// bad</span><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;  itemsCopy[i] = items[i]&#125;<span class="hljs-comment">// good</span>itemsCopy = [...items]</code></pre><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>当需要使用对象的多个属性时，请使用解构赋值：</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFullName</span> (<span class="hljs-params">user</span>) </span>&#123;  <span class="hljs-keyword">const</span> firstName = user.firstName  <span class="hljs-keyword">const</span> lastName = user.lastName  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;firstName&#125;</span> <span class="hljs-subst">$&#123;lastName&#125;</span>`</span>&#125;<span class="hljs-comment">// good</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFullName</span> (<span class="hljs-params">user</span>) </span>&#123;  <span class="hljs-keyword">const</span> &#123; firstName, lastName &#125; = user  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;firstName&#125;</span> <span class="hljs-subst">$&#123;lastName&#125;</span>`</span>&#125;<span class="hljs-comment">// better</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFullName</span> (<span class="hljs-params">&#123; firstName, lastName &#125;</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;firstName&#125;</span> <span class="hljs-subst">$&#123;lastName&#125;</span>`</span>&#125;</code></pre><p>当需要使用数组的多个值时，请同样使用解构赋值:</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> first = arr[<span class="hljs-number">0</span>]<span class="hljs-keyword">const</span> second = arr[<span class="hljs-number">1</span>]<span class="hljs-comment">// good</span><span class="hljs-keyword">const</span> [first, second] = arr</code></pre><p>函数需要回传多个值时，请使用对象的解构，而不是数组的解构:</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomething</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> [top, right, bottom, left]&#125;<span class="hljs-comment">// 如果是数组解构，那么在调用时就需要考虑数据的顺序</span><span class="hljs-keyword">const</span> [top, xx, xxx, left] = doSomething()<span class="hljs-comment">// good</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomething</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> &#123; top, right, bottom, left &#125;&#125;<span class="hljs-comment">// 此时不需要考虑数据的顺序</span><span class="hljs-keyword">const</span> &#123; top, left &#125; = doSomething()</code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串统一使用单引号的形式 <code>&#39;&#39;</code>：</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> department = <span class="hljs-string">&quot;content&quot;</span><span class="hljs-comment">// good</span><span class="hljs-keyword">const</span> department = <span class="hljs-string">&#x27;content&#x27;</span></code></pre><p>字符串太长的时候，请不要使用字符串连接符换行 <code>\</code>，而是使用 <code>+</code>:</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello,world hello,world hello,world&#x27;</span> +  <span class="hljs-string">&#x27;hello,world hello,world hello,world&#x27;</span> +  <span class="hljs-string">&#x27;hello,world hello,world&#x27;</span></code></pre><p>程序化生成字符串时，请使用模板字符串:</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> test = <span class="hljs-string">&#x27;test&#x27;</span><span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> str = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, test].join()<span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-string">&#x27;b&#x27;</span> + test<span class="hljs-comment">// good</span><span class="hljs-keyword">const</span> str = <span class="hljs-string">`ab<span class="hljs-subst">$&#123;test&#125;</span>`</span></code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>请使用函数声明，而不是函数表达式：</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">// do something</span>&#125;<span class="hljs-comment">// good</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">// do something</span>&#125;</code></pre><p>不要在非函数代码块中声明函数:</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-keyword">if</span> (isUse) &#123;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-comment">// do something</span>  &#125;&#125;<span class="hljs-comment">// good</span><span class="hljs-keyword">let</span> test<span class="hljs-keyword">if</span> (isUse) &#123;  test = <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-comment">// do something</span>  &#125;&#125;</code></pre><p>不要使用 <code>arguments</code>，可以选择使用 <code>...</code>:</p><blockquote><p><code>arguments</code> 只是一个类数组，而 <code>...</code> 是一个真正的数组</p></blockquote><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">const</span> args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>)  <span class="hljs-keyword">return</span> args.join(<span class="hljs-string">&#x27;&#x27;</span>)&#125;<span class="hljs-comment">// good</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params">...args</span>) </span>&#123;  <span class="hljs-keyword">return</span> args.join(<span class="hljs-string">&#x27;&#x27;</span>)&#125;</code></pre><p>不要更改函数参数的值:</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params">opts</span>) </span>&#123;  opts = opts || &#123;&#125;&#125;<span class="hljs-comment">// good</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params">opts = &#123;&#125;</span>) </span>&#123;  <span class="hljs-comment">// ...</span>&#125;</code></pre><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><p>使用 <code>class</code>，避免直接操作 <code>prototype</code>：</p><pre><code class="hljs js"><span class="hljs-comment">// bad</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Queue</span> (<span class="hljs-params">contents = []</span>) </span>&#123;  <span class="hljs-built_in">this</span>._queue = [..contents]&#125;Queue.prototype.pop = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">const</span> value = <span class="hljs-built_in">this</span>._queue[<span class="hljs-number">0</span>]  <span class="hljs-built_in">this</span>._queue.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)  <span class="hljs-keyword">return</span> value&#125;<span class="hljs-comment">// good</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span> </span>&#123;  <span class="hljs-title">constructor</span> (<span class="hljs-params">contents = []</span>) &#123;    <span class="hljs-built_in">this</span>._queue = [...contents]  &#125;  pop () &#123;    <span class="hljs-keyword">const</span> value = <span class="hljs-built_in">this</span>._queue[<span class="hljs-number">0</span>]    <span class="hljs-built_in">this</span>._queue.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)    <span class="hljs-keyword">return</span> value  &#125;&#125;</code></pre><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>不要使用 <code>iterators</code>：</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<span class="hljs-comment">// bad</span><span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> num <span class="hljs-keyword">of</span> numbers) &#123;  sum += num&#125;<span class="hljs-comment">// good</span><span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>numbers.forEach(<span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> sum += num)<span class="hljs-comment">// better</span><span class="hljs-keyword">const</span> sum = numbers.reduce(<span class="hljs-function">(<span class="hljs-params">total, num</span>) =&gt;</span> total + num, <span class="hljs-number">0</span>)</code></pre><h4 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h4><p>使用 <code>.</code> 来访问对象属性:</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> joke = &#123;  name: <span class="hljs-string">&#x27;haha&#x27;</span>,  age: <span class="hljs-number">28</span>&#125;<span class="hljs-comment">// bad</span><span class="hljs-keyword">const</span> name = joke[<span class="hljs-string">&#x27;name&#x27;</span>]<span class="hljs-comment">// good</span><span class="hljs-keyword">const</span> name = joke.name</code></pre><h4 id="标准特性"><a href="#标准特性" class="headerlink" title="标准特性"></a>标准特性</h4><p>为了代码的可移植性和兼容性，我们应该最大化的使用标准方法，例如优先使用 string.charAt(3) 而不是 string[3]。</p><p><strong>eval</strong></p><p>由于 eval 方法比较 evil，所以我们约定禁止使用该方法。</p><p><strong>with(){}</strong></p><p>由于 with 方法会产生神奇的作用域，所以我们也是禁止使用该方法的。</p><p><strong>for-in循环</strong></p><p>推荐使用 for in 语法，但是在对对象进行操作时，不要忘了检测 hasOwnProperty(key)。</p><blockquote><p>对数组进行 for in 的时候，顺序是不固定的。</p></blockquote><h3 id="代码规范-1"><a href="#代码规范-1" class="headerlink" title="代码规范"></a>代码规范</h3><h4 id="单行代码块"><a href="#单行代码块" class="headerlink" title="单行代码块"></a>单行代码块</h4><p>在单行代码块中使用空格:</p><p>不推荐:</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>&#125;<span class="hljs-keyword">if</span> (foo) &#123;bar = <span class="hljs-number">0</span>&#125;</code></pre><p>推荐:</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> &#125;<span class="hljs-keyword">if</span> (foo) &#123; bar = <span class="hljs-number">0</span> &#125;</code></pre><h4 id="大括号风格"><a href="#大括号风格" class="headerlink" title="大括号风格"></a>大括号风格</h4><p>在编程过程中，大括号风格与缩进风格紧密联系，用来描述大括号相对代码块位置的方法有很多。在 JavaScript 中，主要有三种风格，如下：</p><p><strong>One True Brace Style</strong></p><pre><code class="hljs js"><span class="hljs-keyword">if</span> (foo) &#123;  bar()&#125; <span class="hljs-keyword">else</span> &#123;  baz()&#125;</code></pre><p><strong>Stroustrup</strong></p><pre><code class="hljs js"><span class="hljs-keyword">if</span> (foo) &#123;  bar()&#125;<span class="hljs-keyword">else</span> &#123;  baz()&#125;</code></pre><p><strong>Allman</strong></p><pre><code class="hljs js"><span class="hljs-keyword">if</span> (foo)&#123;  bar()&#125;<span class="hljs-keyword">else</span>&#123;  baz()&#125;</code></pre><blockquote><p> 约定项目之中统一使用One True Brace Style风格。</p></blockquote><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><p>当命名变量时，主流分为驼峰式命名（variableName）和下划线命名（variable_name）两大阵营。</p><blockquote><p>约定项目中统一使用驼峰式命名。</p></blockquote><h4 id="拖尾逗号"><a href="#拖尾逗号" class="headerlink" title="拖尾逗号"></a>拖尾逗号</h4><p>在 ECMAScript5 里面，对象字面量中的拖尾逗号是合法的，但在 IE8（非 IE8 文档模式）下，当出现拖尾逗号，则会抛出错误。</p><p>拖尾逗号的例子：</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = &#123;  name: <span class="hljs-string">&#x27;foo&#x27;</span>,  age: <span class="hljs-string">&#x27;22&#x27;</span>,&#125;</code></pre><p>因为拖尾逗号有好也有不好，所以团队约定允许在最后一个元素或属性与闭括号 <code>]</code> 或 <code>&#125;</code> 在不同行时，可以（但不要求）使用拖尾逗号。当在同一行时，禁止使用拖尾逗号。</p><h4 id="逗号空格"><a href="#逗号空格" class="headerlink" title="逗号空格"></a>逗号空格</h4><p>逗号前后的空格可以提高代码的可读性，项目中约定在逗号后面使用空格，逗号前面不加空格。</p><p>不推荐:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span>,bar = <span class="hljs-number">2</span><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span> , bar = <span class="hljs-number">2</span><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span> ,bar = <span class="hljs-number">2</span></code></pre><p><em>推荐</em></p><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span>, bar = <span class="hljs-number">2</span></code></pre><h4 id="逗号风格"><a href="#逗号风格" class="headerlink" title="逗号风格"></a>逗号风格</h4><p>逗号分隔列表时，在 JavaScript 中主要有两种逗号风格：</p><ul><li>标准风格，逗号放置在当前行的末尾</li><li>逗号前置风格，逗号放置在下一行的开始位置</li></ul><p>在这里推荐使用标准风格。</p><p>不推荐写法:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span>,bar = <span class="hljs-number">2</span><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span>, bar = <span class="hljs-number">2</span><span class="hljs-keyword">var</span> foo = [<span class="hljs-string">&#x27;name&#x27;</span>          , <span class="hljs-string">&#x27;age&#x27;</span>]</code></pre><p>推荐写法:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span>,    bar = <span class="hljs-number">2</span><span class="hljs-keyword">var</span> foo = [<span class="hljs-string">&#x27;name&#x27;</span>,            <span class="hljs-string">&#x27;age&#x27;</span>]</code></pre><h4 id="对象属性的空格"><a href="#对象属性的空格" class="headerlink" title="对象属性的空格"></a>对象属性的空格</h4><p>约定在对象的计算属性内，禁止使用空格。</p><p>不推荐写法:</p><pre><code class="hljs js">obj[<span class="hljs-string">&#x27;foo&#x27;</span> ]obj[ <span class="hljs-string">&#x27;foo&#x27;</span>]obj[ <span class="hljs-string">&#x27;foo&#x27;</span> ]</code></pre><p>推荐写法:</p><pre><code class="hljs js">obj[<span class="hljs-string">&#x27;foo&#x27;</span>]</code></pre><h4 id="拖尾换行"><a href="#拖尾换行" class="headerlink" title="拖尾换行"></a>拖尾换行</h4><p>在非空文件中，存在拖尾换行是一个常见的 <code>UNIX</code> 风格，它的好处是可以方便在串联和追加文件时不会打断 <code>Shell</code> 的提示。在日常的项目中，保留拖尾换行的好处是，可以减少版本控制时的代码冲突。</p><p>不推荐写法:</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">// do something</span>&#125;</code></pre><p>推荐写法:</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">// do something</span>&#125;  <span class="hljs-comment">// 此处是新的一行</span></code></pre><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p> 为了避免语法错误，团队约定在函数调用时，禁止使用空格。</p><p>不推荐:</p><pre><code class="hljs js">fn ()fn()</code></pre><p>推荐写法:</p><pre><code class="hljs js">fn()</code></pre><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>目前市面上的缩进有两个空格和四个空格之分，还可以使用tab来进行缩进。</p><p>在这里推荐使用两个空格来进行缩进，可以通过<code>.editorconfig</code>来进行设置。</p><h4 id="对象字面量的键值"><a href="#对象字面量的键值" class="headerlink" title="对象字面量的键值"></a>对象字面量的键值</h4><p>约定对象字面量的键和值之间不能存在空格，且要求对象字面量的冒号和值之间存在一个空格。</p><p>不推荐:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-string">&#x27;foo&#x27;</span> : <span class="hljs-string">&#x27;haha&#x27;</span> &#125;</code></pre><p>推荐写法:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-string">&#x27;haha&#x27;</span> &#125;</code></pre><h4 id="构造函数首字母大写"><a href="#构造函数首字母大写" class="headerlink" title="构造函数首字母大写"></a>构造函数首字母大写</h4><p>在 JavaScript 中 <code>new</code> 操作符用来创建某个特定类型的对象的一个实例，该类型的对象是由一个构造函数表示的。由于构造函数只是常规函数，唯一区别是使用 <code>new</code> 来调用。所以我们约定构造函数的首字母要大写，以此来区分构造函数和普通函数。</p><p>不推荐写法:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> fooItem = <span class="hljs-keyword">new</span> foo()</code></pre><p>推荐写法:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person()</code></pre><h4 id="构造函数的参数"><a href="#构造函数的参数" class="headerlink" title="构造函数的参数"></a>构造函数的参数</h4><p>在 JavaScript 中，通过 <code>new</code> 调用构造函数时，如果不带参数，可以省略后面的圆括号。但这样会造成与整体的代码风格不一致，所以约定使用圆括号：</p><p>不推荐:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person</code></pre><p>推荐:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person()</code></pre><h4 id="代码块空格"><a href="#代码块空格" class="headerlink" title="代码块空格"></a>代码块空格</h4><p>一致性是任何风格指南的重要组成部分。虽然在哪里放置块的开括号纯属个人偏好，但在整个项目中应该保持一致。不一致的风格将会分散读者阅读代码的注意力。推荐在代码块前添加空格:</p><p>不推荐的写法:</p><pre><code class="hljs js"><span class="hljs-keyword">if</span> (a)&#123;  b()&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span> (<span class="hljs-params"></span>)</span>&#123;&#125;</code></pre><p>推荐的写法:</p><pre><code class="hljs js"><span class="hljs-keyword">if</span> (a) &#123;  b()&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</code></pre><h4 id="操作符的空格"><a href="#操作符的空格" class="headerlink" title="操作符的空格"></a>操作符的空格</h4><p>约定操作符前后都需要添加空格.</p><p>不推荐的写法:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">1</span>+<span class="hljs-number">2</span></code></pre><p>推荐的写法:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">1</span> + <span class="hljs-number">2</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>svn服务器搭建和使用</title>
    <link href="/2020/11/19/svn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/11/19/svn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="https://unsplash.it/1600/900?random" alt="风景"></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><code>SVN</code>全称是<code>subversion</code>,是一款开源的版本控制系统。通过采用分支管理的模式，能够高效的实现多人共同开发一个项目，从而达到共享资源，最终实现集中式管理。</p><p>svn采用的是客户端/服务端的模式，项目的各种版本都存储在服务器当中，程序开发人员需要先从服务器上获得一份项目的最新版本，并且将其复制到本机，然后在此基础上，每个开发人员都可以在自己的客户端进行独立的开发工作，并且可以随时的将新代码提交给服务器。在开发的同时也可以通过更新操作来获取服务器上的最新代码，从而保持与其他开发者代码的一致性。</p><p>本篇内容将会从windows上安装svn server 端和svn客户端的使用两方面来说明。</p><h2 id="svn-server-端的安装"><a href="#svn-server-端的安装" class="headerlink" title="svn server 端的安装"></a>svn server 端的安装</h2><p>首先需要进入官网来安装svn: 点击 <a href="https://tortoisesvn.net/downloads.html">这里</a>可以进行安装。选择合适的版本即可。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119105145.png"></p><p>在本地会出现一个安装包：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119105258.png"></p><p>双击安装即可。过程如下:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119110532.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119110610.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119110636.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119110717.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119110747.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119110817.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119110845.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119111006.png"></p><p>点击finish后即安装成功。</p><h2 id="仓库的搭建和用户的创建"><a href="#仓库的搭建和用户的创建" class="headerlink" title="仓库的搭建和用户的创建"></a>仓库的搭建和用户的创建</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>安装好了svn server的软件之后，运行软件，会出现下面的界面。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119111158.png"></p><p>下面就可以进行服务器端的仓库搭建和用户创建。</p><p>先来进行仓库搭建：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119111301.png"></p><p>鼠标右键点击repositories ，选择create new repository。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119111408.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119111446.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119111551.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119111620.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119111645.png"></p><p>创建完成后就会在界面当中出现仓库的选项：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119111737.png"></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>鼠标右键点击选项栏中的users，点击create user：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119111915.png"></p><p>接下来输入要创建的用户名和密码以及确认密码：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119112030.png"></p><p>输入完成后点击ok，即可在界面中看到创建的用户：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119112120.png"></p><h2 id="客户端的安装以及连接远程仓库"><a href="#客户端的安装以及连接远程仓库" class="headerlink" title="客户端的安装以及连接远程仓库"></a>客户端的安装以及连接远程仓库</h2><h3 id="客户端的安装"><a href="#客户端的安装" class="headerlink" title="客户端的安装"></a>客户端的安装</h3><p>svn server 端已经配置完成并且已经添加了用来测试的账户，那么接下来就可以安装svn 的客户端，从而进行代码的版本控制。</p><p>安装客户端可以点击 <a href="https://tortoisesvn.net/downloads.zh.html">这里</a>，在网页中选择合适的版本即可下载：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119112544.png"></p><p>下载完成后在本地会出现下面的安装包：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119113134.png"></p><p>点击运行安装：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119113203.png"></p><p><img src="images/image-20201119113229660.png" alt="image-20201119113229660"></p><p>下面可以点击browse可以来选择安装位置：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119113248.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119113309.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119113411.png"></p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119113616.png"></p><blockquote><p>安装时如果出现下面的错误，可以点击 <a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=49062">这里</a>来安装windows的修复更新软件，运行完毕后就可以安装了。<img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119113441.png"></p></blockquote><p>安装完成后在桌面上的鼠标右键菜单上会出现下面的内容：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119113707.png"></p><p>如果出现上面的内容，即代表着安装成功。</p><h3 id="远程仓库的连接"><a href="#远程仓库的连接" class="headerlink" title="远程仓库的连接"></a>远程仓库的连接</h3><p>想要连接仓库，需要先知道远程仓库的地址，可以打开之前创建的服务端，然后进行下面的操作:</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119114732.png"></p><p>上面的操作会复制仓库的地址，接下来就可以在客户端进行svn的相应配置。</p><p>在想要保存代码的地方鼠标右键，选择checkout 选项：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119114845.png"></p><p>将仓库地址在出现的菜单中进行粘贴：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119114947.png"></p><p>点击ok后，会出现输入用户名和密码的选项：</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119115031.png"></p><p>输入用户名和密码，点击ok后会出现下面的窗口，表示从仓库拷贝代码下来，拷贝完成后点击ok即可。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119115112.png"></p><h2 id="代码的提交和更新"><a href="#代码的提交和更新" class="headerlink" title="代码的提交和更新"></a>代码的提交和更新</h2><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><p>当开发完毕后，如果需要将指定的代码提交到服务器，可以通过下面的操作来完成，简单的说就是先add再commit 。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119115437.png"></p><p>add完成操作之后，右键菜单就会出现一个commit 选项，点击既可以提交。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119115527.png"></p><p>然后在出现的界面里将需要提交的文档勾选上，点击ok既可以完成提交。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119115549.png"></p><p>点击ok后会出现文件上传的界面，上传成功后可以点击ok结束操作。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119115634.png"></p><blockquote><p>需要注意的是，在多人开发协作当中，尽量只提交自己操作的代码，不要去上传别人的代码。</p></blockquote><h3 id="更新代码"><a href="#更新代码" class="headerlink" title="更新代码"></a>更新代码</h3><p>提交完成代码后，可以及时更新一下代码，更新代码也很简答，直接点击鼠标右键菜单中的update即可。</p><p><img src="https://liujunhang.oss-cn-beijing.aliyuncs.com/20201119115849.png"></p>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>svn,开发工具,版本控制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新的开始</title>
    <link href="/2020/11/18/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <url>/2020/11/18/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<p><img src="https://unsplash.it/1600/900?random" alt="风景"></p><p>2020年对于很多人来说，都是非常特殊的一年，在这一年当中见到了太多的故事和眼泪。</p><p>幸运的是自己能够囫囵个坚持到现在，虽然一整年的时间没有太多的收获，但是能够在这样的环境下得以保全平安，也是一件非常值得开心的事。</p><p>今年马上过去，年纪眼看着又要长了一岁，心里总是会暗暗的焦虑。对于未来、对于现在，直到此时自己还是两眼发黑。</p><p>想了一圈，也没得到什么靠谱的答案，只能够先把眼前的事做好，然后慢慢的去摸索和学习其他的方向，希望能够有一些意外的收获。</p>]]></content>
    
    
    <categories>
      
      <category>生活日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活琐碎</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
